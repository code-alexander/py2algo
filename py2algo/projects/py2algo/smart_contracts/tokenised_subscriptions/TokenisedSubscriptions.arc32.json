{
    "hints": {
        "mint_tokens(account,uint64,uint64,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_tokens(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "active_from(asset)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "payment_amount(asset)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "payment_frequency(asset)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "cycle_number(asset,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim_payment(axfer)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudG9rZW5pc2VkX3N1YnNjcmlwdGlvbnMuY29udHJhY3QuVG9rZW5pc2VkU3Vic2NyaXB0aW9ucy5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Rva2VuaXNlZF9zdWJzY3JpcHRpb25zL2NvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIFRva2VuaXNlZFN1YnNjcmlwdGlvbnMoQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "TokenisedSubscriptions",
        "desc": "A contract for subscription payments using redeemable NFTs.",
        "methods": [
            {
                "name": "mint_tokens",
                "args": [
                    {
                        "type": "account",
                        "name": "initial_redeemer",
                        "desc": "_description_"
                    },
                    {
                        "type": "uint64",
                        "name": "active_from",
                        "desc": "_description_"
                    },
                    {
                        "type": "uint64",
                        "name": "payment_amount",
                        "desc": "_description_"
                    },
                    {
                        "type": "uint64",
                        "name": "payment_frequency",
                        "desc": "_description_"
                    },
                    {
                        "type": "uint64",
                        "name": "max_payments",
                        "desc": "_description_"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "_description_"
                },
                "desc": "Creates"
            },
            {
                "name": "withdraw_tokens",
                "args": [
                    {
                        "type": "asset",
                        "name": "subscription",
                        "desc": "The subscription token."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Transfers the subscription tokens to the initial redeemer."
            },
            {
                "name": "active_from",
                "args": [
                    {
                        "type": "asset",
                        "name": "subscription",
                        "desc": "The subscription token."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The 'active from' round number."
                },
                "desc": "Parses the 'active from' round number from the subscription token."
            },
            {
                "name": "payment_amount",
                "args": [
                    {
                        "type": "asset",
                        "name": "subscription",
                        "desc": "The subscription token."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The payment amount in MicroAlgos."
                },
                "desc": "Parses the payment amount from the subscription token."
            },
            {
                "name": "payment_frequency",
                "args": [
                    {
                        "type": "asset",
                        "name": "subscription",
                        "desc": "The subscription token."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The payment frequency (number of rounds)."
                },
                "desc": "Parses the payment frequency from the subscription token."
            },
            {
                "name": "cycle_number",
                "args": [
                    {
                        "type": "asset",
                        "name": "subscription",
                        "desc": "The subscription token."
                    },
                    {
                        "type": "uint64",
                        "name": "at_round",
                        "desc": "The round to calculate the payment cycle 'as at'."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The payment cycle number."
                },
                "desc": "Calculates the payment cycle number 'as at' a specific round."
            },
            {
                "name": "claim_payment",
                "args": [
                    {
                        "type": "axfer",
                        "name": "axfer",
                        "desc": "The transaction transferring a unit of the subscription token to the contract account."
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Makes a payment to the subscription token owner, if eligible."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}