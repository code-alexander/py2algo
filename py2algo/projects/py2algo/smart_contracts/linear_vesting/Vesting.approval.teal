#pragma version 10

smart_contracts.linear_vesting.contract.Vesting.approval_program:
    // smart_contracts/linear_vesting/contract.py:5
    // class Vesting(ARC4Contract):
    method "new(account,uint64,uint64)void"
    method "calculate_vesting(uint64,uint64,uint64,uint64)uint64"
    method "release_funds()void"
    txna ApplicationArgs 0
    match main_new_route@1 main_calculate_vesting_route@2 main_release_funds_route@3
    err // reject transaction

main_new_route@1:
    // smart_contracts/linear_vesting/contract.py:8
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    // smart_contracts/linear_vesting/contract.py:5
    // class Vesting(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // smart_contracts/linear_vesting/contract.py:8
    // @arc4.abimethod(create="require")
    callsub new
    int 1
    return

main_calculate_vesting_route@2:
    // smart_contracts/linear_vesting/contract.py:22
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/linear_vesting/contract.py:5
    // class Vesting(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    // smart_contracts/linear_vesting/contract.py:22
    // @arc4.abimethod
    callsub calculate_vesting
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_release_funds_route@3:
    // smart_contracts/linear_vesting/contract.py:41
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub release_funds
    int 1
    return


// smart_contracts.linear_vesting.contract.Vesting.new(beneficiary: bytes, start: uint64, duration: uint64) -> void:
new:
    // smart_contracts/linear_vesting/contract.py:8-9
    // @arc4.abimethod(create="require")
    // def new(self, beneficiary: Account, start: UInt64, duration: UInt64) -> None:
    proto 3 0
    // smart_contracts/linear_vesting/contract.py:17
    // self.beneficiary = beneficiary
    byte "beneficiary"
    frame_dig -3
    app_global_put
    // smart_contracts/linear_vesting/contract.py:18
    // self.start = start
    byte "start"
    frame_dig -2
    app_global_put
    // smart_contracts/linear_vesting/contract.py:19
    // self.duration = duration
    byte "duration"
    frame_dig -1
    app_global_put
    // smart_contracts/linear_vesting/contract.py:20
    // self.released = UInt64(0)
    byte "released"
    int 0
    app_global_put
    retsub


// smart_contracts.linear_vesting.contract.Vesting.calculate_vesting(allocation: uint64, start: uint64, duration: uint64, at: uint64) -> uint64:
calculate_vesting:
    // smart_contracts/linear_vesting/contract.py:22-23
    // @arc4.abimethod
    // def calculate_vesting(self, *, allocation: UInt64, start: UInt64, duration: UInt64, at: UInt64) -> UInt64:
    proto 4 1
    // smart_contracts/linear_vesting/contract.py:35
    // if at < start:
    frame_dig -1
    frame_dig -3
    <
    bz calculate_vesting_after_if_else@2
    // smart_contracts/linear_vesting/contract.py:36
    // return UInt64(0)
    int 0
    retsub

calculate_vesting_after_if_else@2:
    // smart_contracts/linear_vesting/contract.py:37
    // if at >= start + duration:
    frame_dig -3
    frame_dig -2
    +
    frame_dig -1
    <=
    bz calculate_vesting_after_if_else@4
    // smart_contracts/linear_vesting/contract.py:38
    // return allocation
    frame_dig -4
    retsub

calculate_vesting_after_if_else@4:
    // smart_contracts/linear_vesting/contract.py:39
    // return allocation * (at - start) // duration
    frame_dig -1
    frame_dig -3
    -
    frame_dig -4
    *
    frame_dig -2
    /
    retsub


// smart_contracts.linear_vesting.contract.Vesting.release_funds() -> void:
release_funds:
    // smart_contracts/linear_vesting/contract.py:41-42
    // @arc4.abimethod
    // def release_funds(self) -> None:
    proto 0 0
    // smart_contracts/linear_vesting/contract.py:45
    // allocation=Global.current_application_address.balance + self.released,
    global CurrentApplicationAddress
    acct_params_get AcctBalance
    assert // account funded
    int 0
    byte "released"
    app_global_get_ex
    assert // check released exists
    +
    // smart_contracts/linear_vesting/contract.py:46
    // start=self.start,
    int 0
    byte "start"
    app_global_get_ex
    assert // check start exists
    // smart_contracts/linear_vesting/contract.py:47
    // duration=self.duration,
    int 0
    byte "duration"
    app_global_get_ex
    assert // check duration exists
    // smart_contracts/linear_vesting/contract.py:48
    // at=Global.round,
    global Round
    // smart_contracts/linear_vesting/contract.py:44-49
    // vested = self.calculate_vesting(
    //     allocation=Global.current_application_address.balance + self.released,
    //     start=self.start,
    //     duration=self.duration,
    //     at=Global.round,
    // )
    callsub calculate_vesting
    // smart_contracts/linear_vesting/contract.py:50
    // releaseable = vested - self.released
    int 0
    byte "released"
    app_global_get_ex
    assert // check released exists
    -
    // smart_contracts/linear_vesting/contract.py:51
    // assert releaseable, "No funds to release at the current round"
    dup
    assert // No funds to release at the current round
    // smart_contracts/linear_vesting/contract.py:52
    // itxn.Payment(receiver=self.beneficiary, amount=releaseable, fee=0).submit()
    itxn_begin
    int 0
    byte "beneficiary"
    app_global_get_ex
    assert // check beneficiary exists
    int 0
    itxn_field Fee
    dig 1
    itxn_field Amount
    itxn_field Receiver
    int pay
    itxn_field TypeEnum
    itxn_submit
    // smart_contracts/linear_vesting/contract.py:53
    // self.released += releaseable
    int 0
    byte "released"
    app_global_get_ex
    assert // check released exists
    +
    byte "released"
    swap
    app_global_put
    retsub
