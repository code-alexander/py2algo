{
    "hints": {
        "new(byte[],uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "calculate_target(uint64,uint64,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZmFpcl9sYXVuY2guY29udHJhY3QuRmFpckxhdW5jaC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhaXJfbGF1bmNoL2NvbnRyYWN0LnB5OjcKICAgIC8vIGNsYXNzIEZhaXJMYXVuY2goQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "difficulty_halving_interval": {
                    "type": "uint64",
                    "key": "difficulty_halving_interval"
                },
                "last_round": {
                    "type": "uint64",
                    "key": "last_round"
                },
                "minimum_balance": {
                    "type": "uint64",
                    "key": "minimum_balance"
                },
                "previous_hash": {
                    "type": "bytes",
                    "key": "previous_hash"
                },
                "zero_bits": {
                    "type": "uint64",
                    "key": "zero_bits"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "FairLaunch",
        "desc": "A contract for fairly launching an NFT project.",
        "methods": [
            {
                "name": "new",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "genesis_hash",
                        "desc": "The value to use for the first hash."
                    },
                    {
                        "type": "uint64",
                        "name": "minimum_balance",
                        "desc": "The minimum amount of MicroAlgos an account must have to claim an asset."
                    },
                    {
                        "type": "uint64",
                        "name": "zero_bits",
                        "desc": "The maximum number of leading zero bits the target number can have."
                    },
                    {
                        "type": "uint64",
                        "name": "difficulty_halving_interval",
                        "desc": "The number of rounds that elapse between each difficulty halving."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Creates a new application."
            },
            {
                "name": "calculate_target",
                "args": [
                    {
                        "type": "uint64",
                        "name": "zero_bits",
                        "desc": "The maximum number of leading zero bits the target number can have."
                    },
                    {
                        "type": "uint64",
                        "name": "difficulty_halving_interval",
                        "desc": "The number of rounds that elapse between each difficulty halving."
                    },
                    {
                        "type": "uint64",
                        "name": "last_round",
                        "desc": "The last round an asset was released at."
                    },
                    {
                        "type": "uint64",
                        "name": "at_round",
                        "desc": "The round that the target is calculated 'as at'."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The target number."
                },
                "desc": "Calculate the target number that the hash must be less than or equal to."
            },
            {
                "name": "claim",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset",
                        "desc": "The requested asset."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Transfers the requested asset to the claimant, if they are eligible to receive it."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}