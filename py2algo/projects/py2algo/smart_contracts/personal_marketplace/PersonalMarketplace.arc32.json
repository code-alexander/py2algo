{
    "hints": {
        "creator()address": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "opt_in(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "list_nft(axfer,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "price(asset)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "purchase_nft(asset,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMucGVyc29uYWxfbWFya2V0cGxhY2UuY29udHJhY3QuUGVyc29uYWxNYXJrZXRwbGFjZS5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnNvbmFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjI5CiAgICAvLyBjbGFzcyBQZXJzb25hbE1hcmtldHBsYWNlKEFSQzRDb250cmFjdCk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "PersonalMarketplace",
        "desc": "A simple contract for selling NFTs.",
        "methods": [
            {
                "name": "creator",
                "args": [],
                "returns": {
                    "type": "address",
                    "desc": "The creator's address."
                },
                "desc": "A public method that returns the creator's address encoded as an ARC-4 ABI type."
            },
            {
                "name": "opt_in",
                "args": [
                    {
                        "type": "asset",
                        "name": "nft",
                        "desc": "The asset to opt in to."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Opts the contract into an asset."
            },
            {
                "name": "list_nft",
                "args": [
                    {
                        "type": "axfer",
                        "name": "axfer",
                        "desc": "The transaction transferring the asset for sale to the contract."
                    },
                    {
                        "type": "uint64",
                        "name": "price",
                        "desc": "The minimum price the asset can be sold for."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Lists an NFT for sale."
            },
            {
                "name": "price",
                "args": [
                    {
                        "type": "asset",
                        "name": "nft",
                        "desc": "The NFT."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The minimum sale price in MicroAlgos."
                },
                "desc": "Returns the minimum sale price for an NFT."
            },
            {
                "name": "purchase_nft",
                "args": [
                    {
                        "type": "asset",
                        "name": "nft",
                        "desc": "The NFT being purchased."
                    },
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "The payment to the creator."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Allows a user to purchase an NFT."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}