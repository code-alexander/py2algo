{
    "hints": {
        "opt_router_in(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "send_asset(axfer,address)address": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim_asset(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuYXJjNTkuY29udHJhY3QuUm91dGVyLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTkvY29udHJhY3QucHk6MTE5CiAgICAvLyBjbGFzcyBSb3V0ZXIoQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Router",
        "desc": "A router contract that enables the transfer of assets to any address.",
        "methods": [
            {
                "name": "opt_router_in",
                "args": [
                    {
                        "type": "uint64",
                        "name": "asset_id",
                        "desc": "The ID of the asset to opt in to."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Opts the router in to the asset.\nThis is required before the app can be used to send the asset to a receiver."
            },
            {
                "name": "send_asset",
                "args": [
                    {
                        "type": "axfer",
                        "name": "axfer",
                        "desc": "The transaction transferring the asset to the router app."
                    },
                    {
                        "type": "address",
                        "name": "receiver",
                        "desc": "The intended asset receiver."
                    }
                ],
                "returns": {
                    "type": "address",
                    "desc": "The address the asset was sent to."
                },
                "desc": "Sends an asset from the application account to the receiver, or to their vault."
            },
            {
                "name": "claim_asset",
                "args": [
                    {
                        "type": "uint64",
                        "name": "asset_id",
                        "desc": "The ID of the asset to withdraw."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Withdraws the total balance of an asset from a vault.\nThe transaction must be sent by the receiver that owns the vault."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}