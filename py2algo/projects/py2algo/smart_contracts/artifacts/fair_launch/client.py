# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "new(byte[],uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "calculate_target(uint64,uint64,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZmFpcl9sYXVuY2guY29udHJhY3QuRmFpckxhdW5jaC5hcHByb3ZhbF9wcm9ncmFtOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhaXJfbGF1bmNoL2NvbnRyYWN0LnB5OjcKICAgIC8vIGNsYXNzIEZhaXJMYXVuY2goQVJDNENvbnRyYWN0KToKICAgIG1ldGhvZCAibmV3KGJ5dGVbXSx1aW50NjQsdWludDY0LHVpbnQ2NCl2b2lkIgogICAgbWV0aG9kICJjYWxjdWxhdGVfdGFyZ2V0KHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCl1aW50NjQiCiAgICBtZXRob2QgImNsYWltKGFzc2V0KXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX25ld19yb3V0ZUAxIG1haW5fY2FsY3VsYXRlX3RhcmdldF9yb3V0ZUAyIG1haW5fY2xhaW1fcm91dGVAMwogICAgZXJyIC8vIHJlamVjdCB0cmFuc2FjdGlvbgoKbWFpbl9uZXdfcm91dGVAMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYWlyX2xhdW5jaC9jb250cmFjdC5weToxMAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gaXMgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYWlyX2xhdW5jaC9jb250cmFjdC5weTo3CiAgICAvLyBjbGFzcyBGYWlyTGF1bmNoKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhaXJfbGF1bmNoL2NvbnRyYWN0LnB5OjEwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoY3JlYXRlPSJyZXF1aXJlIikKICAgIGNhbGxzdWIgbmV3CiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2NhbGN1bGF0ZV90YXJnZXRfcm91dGVAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYWlyX2xhdW5jaC9jb250cmFjdC5weTozMAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFpcl9sYXVuY2gvY29udHJhY3QucHk6NwogICAgLy8gY2xhc3MgRmFpckxhdW5jaChBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhaXJfbGF1bmNoL2NvbnRyYWN0LnB5OjMwCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgY2FsY3VsYXRlX3RhcmdldAogICAgaXRvYgogICAgYnl0ZSAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9jbGFpbV9yb3V0ZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhaXJfbGF1bmNoL2NvbnRyYWN0LnB5OjQ4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYWlyX2xhdW5jaC9jb250cmFjdC5weTo3CiAgICAvLyBjbGFzcyBGYWlyTGF1bmNoKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBc3NldHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYWlyX2xhdW5jaC9jb250cmFjdC5weTo0OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGNsYWltCiAgICBpbnQgMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzLmZhaXJfbGF1bmNoLmNvbnRyYWN0LkZhaXJMYXVuY2gubmV3KGdlbmVzaXNfaGFzaDogYnl0ZXMsIG1pbmltdW1fYmFsYW5jZTogdWludDY0LCB6ZXJvX2JpdHM6IHVpbnQ2NCwgZGlmZmljdWx0eV9oYWx2aW5nX2ludGVydmFsOiB1aW50NjQpIC0+IHZvaWQ6Cm5ldzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYWlyX2xhdW5jaC9jb250cmFjdC5weToxMC0xMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICAvLyBkZWYgbmV3KAogICAgLy8gICAgIHNlbGYsICosIGdlbmVzaXNfaGFzaDogQnl0ZXMsIG1pbmltdW1fYmFsYW5jZTogVUludDY0LCB6ZXJvX2JpdHM6IFVJbnQ2NCwgZGlmZmljdWx0eV9oYWx2aW5nX2ludGVydmFsOiBVSW50NjQKICAgIC8vICkgLT4gTm9uZToKICAgIHByb3RvIDQgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhaXJfbGF1bmNoL2NvbnRyYWN0LnB5OjIyCiAgICAvLyBhc3NlcnQgemVyb19iaXRzIDwgNjQsICJgemVyb19iaXRzYCBtdXN0IGJlIDwgNjQiCiAgICBmcmFtZV9kaWcgLTIKICAgIGludCA2NAogICAgPAogICAgYXNzZXJ0IC8vIGB6ZXJvX2JpdHNgIG11c3QgYmUgPCA2NAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhaXJfbGF1bmNoL2NvbnRyYWN0LnB5OjI0CiAgICAvLyBzZWxmLnByZXZpb3VzX2hhc2ggPSBnZW5lc2lzX2hhc2gKICAgIGJ5dGUgInByZXZpb3VzX2hhc2giCiAgICBmcmFtZV9kaWcgLTQKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFpcl9sYXVuY2gvY29udHJhY3QucHk6MjUKICAgIC8vIHNlbGYubWluaW11bV9iYWxhbmNlID0gbWluaW11bV9iYWxhbmNlCiAgICBieXRlICJtaW5pbXVtX2JhbGFuY2UiCiAgICBmcmFtZV9kaWcgLTMKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFpcl9sYXVuY2gvY29udHJhY3QucHk6MjYKICAgIC8vIHNlbGYuemVyb19iaXRzID0gemVyb19iaXRzCiAgICBieXRlICJ6ZXJvX2JpdHMiCiAgICBmcmFtZV9kaWcgLTIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFpcl9sYXVuY2gvY29udHJhY3QucHk6MjcKICAgIC8vIHNlbGYuZGlmZmljdWx0eV9oYWx2aW5nX2ludGVydmFsID0gZGlmZmljdWx0eV9oYWx2aW5nX2ludGVydmFsCiAgICBieXRlICJkaWZmaWN1bHR5X2hhbHZpbmdfaW50ZXJ2YWwiCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFpcl9sYXVuY2gvY29udHJhY3QucHk6MjgKICAgIC8vIHNlbGYubGFzdF9yb3VuZCA9IEdsb2JhbC5yb3VuZAogICAgYnl0ZSAibGFzdF9yb3VuZCIKICAgIGdsb2JhbCBSb3VuZAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5mYWlyX2xhdW5jaC5jb250cmFjdC5GYWlyTGF1bmNoLmNhbGN1bGF0ZV90YXJnZXQoemVyb19iaXRzOiB1aW50NjQsIGRpZmZpY3VsdHlfaGFsdmluZ19pbnRlcnZhbDogdWludDY0LCBsYXN0X3JvdW5kOiB1aW50NjQsIGF0X3JvdW5kOiB1aW50NjQpIC0+IHVpbnQ2NDoKY2FsY3VsYXRlX3RhcmdldDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYWlyX2xhdW5jaC9jb250cmFjdC5weTozMC0zMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgY2FsY3VsYXRlX3RhcmdldCgKICAgIC8vICAgICBzZWxmLCB6ZXJvX2JpdHM6IFVJbnQ2NCwgZGlmZmljdWx0eV9oYWx2aW5nX2ludGVydmFsOiBVSW50NjQsIGxhc3Rfcm91bmQ6IFVJbnQ2NCwgYXRfcm91bmQ6IFVJbnQ2NAogICAgLy8gKSAtPiBVSW50NjQ6CiAgICBwcm90byA0IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYWlyX2xhdW5jaC9jb250cmFjdC5weTo0NQogICAgLy8gaGFsdmluZ3MgPSAoYXRfcm91bmQgLSBsYXN0X3JvdW5kKSAvLyBkaWZmaWN1bHR5X2hhbHZpbmdfaW50ZXJ2YWwKICAgIGZyYW1lX2RpZyAtMQogICAgZnJhbWVfZGlnIC0yCiAgICAtCiAgICBmcmFtZV9kaWcgLTMKICAgIC8KICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhaXJfbGF1bmNoL2NvbnRyYWN0LnB5OjQ2CiAgICAvLyByZXR1cm4gVUludDY0KFRBUkdFVF9MSU1JVCkgaWYgaGFsdmluZ3MgPiB6ZXJvX2JpdHMgZWxzZSBVSW50NjQoVEFSR0VUX0xJTUlUKSA+PiB6ZXJvX2JpdHMgLSBoYWx2aW5ncwogICAgZnJhbWVfZGlnIC00CiAgICA+CiAgICBieiBjYWxjdWxhdGVfdGFyZ2V0X3Rlcm5hcnlfZmFsc2VAMgogICAgaW50IDE4NDQ2NzQ0MDczNzA5NTUxNjE1CiAgICBiIGNhbGN1bGF0ZV90YXJnZXRfdGVybmFyeV9tZXJnZUAzCgpjYWxjdWxhdGVfdGFyZ2V0X3Rlcm5hcnlfZmFsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYWlyX2xhdW5jaC9jb250cmFjdC5weTo0NgogICAgLy8gcmV0dXJuIFVJbnQ2NChUQVJHRVRfTElNSVQpIGlmIGhhbHZpbmdzID4gemVyb19iaXRzIGVsc2UgVUludDY0KFRBUkdFVF9MSU1JVCkgPj4gemVyb19iaXRzIC0gaGFsdmluZ3MKICAgIGZyYW1lX2RpZyAtNAogICAgZnJhbWVfZGlnIDAKICAgIC0KICAgIGludCAxODQ0Njc0NDA3MzcwOTU1MTYxNQogICAgc3dhcAogICAgc2hyCgpjYWxjdWxhdGVfdGFyZ2V0X3Rlcm5hcnlfbWVyZ2VAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYWlyX2xhdW5jaC9jb250cmFjdC5weTo0NgogICAgLy8gcmV0dXJuIFVJbnQ2NChUQVJHRVRfTElNSVQpIGlmIGhhbHZpbmdzID4gemVyb19iaXRzIGVsc2UgVUludDY0KFRBUkdFVF9MSU1JVCkgPj4gemVyb19iaXRzIC0gaGFsdmluZ3MKICAgIHN3YXAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5mYWlyX2xhdW5jaC5jb250cmFjdC5GYWlyTGF1bmNoLmNsYWltKGFzc2V0OiB1aW50NjQpIC0+IHZvaWQ6CmNsYWltOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhaXJfbGF1bmNoL2NvbnRyYWN0LnB5OjQ4LTQ5CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBjbGFpbShzZWxmLCBhc3NldDogQXNzZXQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYWlyX2xhdW5jaC9jb250cmFjdC5weTo1NQogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIuYmFsYW5jZSA+PSBzZWxmLm1pbmltdW1fYmFsYW5jZSwgIlNlbmRlcidzIGJhbGFuY2UgaXMgYmVsb3cgdGhlIG1pbmltdW0gcmVxdWlyZW1lbnQiCiAgICB0eG4gU2VuZGVyCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgaW50IDAKICAgIGJ5dGUgIm1pbmltdW1fYmFsYW5jZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgbWluaW11bV9iYWxhbmNlIGV4aXN0cwogICAgPj0KICAgIGFzc2VydCAvLyBTZW5kZXIncyBiYWxhbmNlIGlzIGJlbG93IHRoZSBtaW5pbXVtIHJlcXVpcmVtZW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFpcl9sYXVuY2gvY29udHJhY3QucHk6NTYKICAgIC8vIG5ld19oYXNoID0gb3Auc2hhMjU2KFR4bi5zZW5kZXIuYnl0ZXMgKyBzZWxmLnByZXZpb3VzX2hhc2gpCiAgICB0eG4gU2VuZGVyCiAgICBpbnQgMAogICAgYnl0ZSAicHJldmlvdXNfaGFzaCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgcHJldmlvdXNfaGFzaCBleGlzdHMKICAgIGNvbmNhdAogICAgc2hhMjU2CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFpcl9sYXVuY2gvY29udHJhY3QucHk6NTcKICAgIC8vIGFzc2VydCBvcC5leHRyYWN0X3VpbnQ2NChuZXdfaGFzaCwgMCkgPCBzZWxmLmNhbGN1bGF0ZV90YXJnZXQoCiAgICBkdXAKICAgIGludCAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhaXJfbGF1bmNoL2NvbnRyYWN0LnB5OjU4CiAgICAvLyBzZWxmLnplcm9fYml0cywgc2VsZi5kaWZmaWN1bHR5X2hhbHZpbmdfaW50ZXJ2YWwsIHNlbGYubGFzdF9yb3VuZCwgR2xvYmFsLnJvdW5kCiAgICBpbnQgMAogICAgYnl0ZSAiemVyb19iaXRzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayB6ZXJvX2JpdHMgZXhpc3RzCiAgICBpbnQgMAogICAgYnl0ZSAiZGlmZmljdWx0eV9oYWx2aW5nX2ludGVydmFsIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBkaWZmaWN1bHR5X2hhbHZpbmdfaW50ZXJ2YWwgZXhpc3RzCiAgICBpbnQgMAogICAgYnl0ZSAibGFzdF9yb3VuZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgbGFzdF9yb3VuZCBleGlzdHMKICAgIGdsb2JhbCBSb3VuZAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhaXJfbGF1bmNoL2NvbnRyYWN0LnB5OjU3LTU5CiAgICAvLyBhc3NlcnQgb3AuZXh0cmFjdF91aW50NjQobmV3X2hhc2gsIDApIDwgc2VsZi5jYWxjdWxhdGVfdGFyZ2V0KAogICAgLy8gICAgIHNlbGYuemVyb19iaXRzLCBzZWxmLmRpZmZpY3VsdHlfaGFsdmluZ19pbnRlcnZhbCwgc2VsZi5sYXN0X3JvdW5kLCBHbG9iYWwucm91bmQKICAgIC8vICkKICAgIGNhbGxzdWIgY2FsY3VsYXRlX3RhcmdldAogICAgPAogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFpcl9sYXVuY2gvY29udHJhY3QucHk6NjAKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2Zlcih4ZmVyX2Fzc2V0PWFzc2V0LCBhc3NldF9hbW91bnQ9MSwgYXNzZXRfcmVjZWl2ZXI9VHhuLnNlbmRlciwgZmVlPTApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICB0eG4gU2VuZGVyCiAgICBpbnQgMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgaW50IDEKICAgIGl0eG5fZmllbGQgQXNzZXRBbW91bnQKICAgIGZyYW1lX2RpZyAtMQogICAgaXR4bl9maWVsZCBYZmVyQXNzZXQKICAgIGludCBheGZlcgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYWlyX2xhdW5jaC9jb250cmFjdC5weTo2MQogICAgLy8gc2VsZi5wcmV2aW91c19oYXNoID0gbmV3X2hhc2gKICAgIGJ5dGUgInByZXZpb3VzX2hhc2giCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhaXJfbGF1bmNoL2NvbnRyYWN0LnB5OjYyCiAgICAvLyBzZWxmLmxhc3Rfcm91bmQgPSBHbG9iYWwucm91bmQKICAgIGJ5dGUgImxhc3Rfcm91bmQiCiAgICBnbG9iYWwgUm91bmQKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZmFpcl9sYXVuY2guY29udHJhY3QuRmFpckxhdW5jaC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhaXJfbGF1bmNoL2NvbnRyYWN0LnB5OjcKICAgIC8vIGNsYXNzIEZhaXJMYXVuY2goQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "difficulty_halving_interval": {
                    "type": "uint64",
                    "key": "difficulty_halving_interval"
                },
                "last_round": {
                    "type": "uint64",
                    "key": "last_round"
                },
                "minimum_balance": {
                    "type": "uint64",
                    "key": "minimum_balance"
                },
                "previous_hash": {
                    "type": "bytes",
                    "key": "previous_hash"
                },
                "zero_bits": {
                    "type": "uint64",
                    "key": "zero_bits"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "FairLaunch",
        "methods": [
            {
                "name": "new",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "genesis_hash",
                        "desc": "The value to use for the first hash."
                    },
                    {
                        "type": "uint64",
                        "name": "minimum_balance",
                        "desc": "The minimum amount of MicroAlgos an account must have to claim an asset."
                    },
                    {
                        "type": "uint64",
                        "name": "zero_bits",
                        "desc": "The maximum number of leading zero bits the target number can have."
                    },
                    {
                        "type": "uint64",
                        "name": "difficulty_halving_interval",
                        "desc": "The number of rounds that elapse between each difficulty halving."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Creates a new application."
            },
            {
                "name": "calculate_target",
                "args": [
                    {
                        "type": "uint64",
                        "name": "zero_bits",
                        "desc": "The maximum number of leading zero bits the target number can have."
                    },
                    {
                        "type": "uint64",
                        "name": "difficulty_halving_interval",
                        "desc": "The number of rounds that elapse between each difficulty halving."
                    },
                    {
                        "type": "uint64",
                        "name": "last_round",
                        "desc": "The last round an asset was released at."
                    },
                    {
                        "type": "uint64",
                        "name": "at_round",
                        "desc": "The round that the target is calculated 'as at'."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The target number."
                },
                "desc": "Calculate the target number that the hash must be less than or equal to."
            },
            {
                "name": "claim",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset",
                        "desc": "The requested asset."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Transfers the requested asset to the claimant, if they are eligible to receive it."
            }
        ],
        "networks": {},
        "desc": "A contract for fairly launching an NFT project."
    },
    "bare_call_config": {}
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


@dataclasses.dataclass(kw_only=True)
class DeployCreate(algokit_utils.DeployCreateCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data)
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class CalculateTargetArgs(_ArgsBase[int]):
    """Calculate the target number that the hash must be less than or equal to."""

    zero_bits: int
    """The maximum number of leading zero bits the target number can have."""
    difficulty_halving_interval: int
    """The number of rounds that elapse between each difficulty halving."""
    last_round: int
    """The last round an asset was released at."""
    at_round: int
    """The round that the target is calculated 'as at'."""

    @staticmethod
    def method() -> str:
        return "calculate_target(uint64,uint64,uint64,uint64)uint64"


@dataclasses.dataclass(kw_only=True)
class ClaimArgs(_ArgsBase[None]):
    """Transfers the requested asset to the claimant, if they are eligible to receive it."""

    asset: int
    """The requested asset."""

    @staticmethod
    def method() -> str:
        return "claim(asset)void"


@dataclasses.dataclass(kw_only=True)
class NewArgs(_ArgsBase[None]):
    """Creates a new application."""

    genesis_hash: bytes | bytearray
    """The value to use for the first hash."""
    minimum_balance: int
    """The minimum amount of MicroAlgos an account must have to claim an asset."""
    zero_bits: int
    """The maximum number of leading zero bits the target number can have."""
    difficulty_halving_interval: int
    """The number of rounds that elapse between each difficulty halving."""

    @staticmethod
    def method() -> str:
        return "new(byte[],uint64,uint64,uint64)void"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.difficulty_halving_interval = typing.cast(int, data.get(b"difficulty_halving_interval"))
        self.last_round = typing.cast(int, data.get(b"last_round"))
        self.minimum_balance = typing.cast(int, data.get(b"minimum_balance"))
        self.previous_hash = ByteReader(typing.cast(bytes, data.get(b"previous_hash")))
        self.zero_bits = typing.cast(int, data.get(b"zero_bits"))


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def calculate_target(
        self,
        *,
        zero_bits: int,
        difficulty_halving_interval: int,
        last_round: int,
        at_round: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Calculate the target number that the hash must be less than or equal to.
        
        Adds a call to `calculate_target(uint64,uint64,uint64,uint64)uint64` ABI method
        
        :param int zero_bits: The maximum number of leading zero bits the target number can have.
        :param int difficulty_halving_interval: The number of rounds that elapse between each difficulty halving.
        :param int last_round: The last round an asset was released at.
        :param int at_round: The round that the target is calculated 'as at'.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CalculateTargetArgs(
            zero_bits=zero_bits,
            difficulty_halving_interval=difficulty_halving_interval,
            last_round=last_round,
            at_round=at_round,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def claim(
        self,
        *,
        asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Transfers the requested asset to the claimant, if they are eligible to receive it.
        
        Adds a call to `claim(asset)void` ABI method
        
        :param int asset: The requested asset.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ClaimArgs(
            asset=asset,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_new(
        self,
        *,
        genesis_hash: bytes | bytearray,
        minimum_balance: int,
        zero_bits: int,
        difficulty_halving_interval: int,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Creates a new application.
        
        Adds a call to `new(byte[],uint64,uint64,uint64)void` ABI method
        
        :param bytes | bytearray genesis_hash: The value to use for the first hash.
        :param int minimum_balance: The minimum amount of MicroAlgos an account must have to claim an asset.
        :param int zero_bits: The maximum number of leading zero bits the target number can have.
        :param int difficulty_halving_interval: The number of rounds that elapse between each difficulty halving.
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = NewArgs(
            genesis_hash=genesis_hash,
            minimum_balance=minimum_balance,
            zero_bits=zero_bits,
            difficulty_halving_interval=difficulty_halving_interval,
        )
        self.app_client.compose_create(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class FairLaunchClient:
    """A contract for fairly launching an NFT project.
    
    A class for interacting with the FairLaunch app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        FairLaunchClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def calculate_target(
        self,
        *,
        zero_bits: int,
        difficulty_halving_interval: int,
        last_round: int,
        at_round: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calculate the target number that the hash must be less than or equal to.
        
        Calls `calculate_target(uint64,uint64,uint64,uint64)uint64` ABI method
        
        :param int zero_bits: The maximum number of leading zero bits the target number can have.
        :param int difficulty_halving_interval: The number of rounds that elapse between each difficulty halving.
        :param int last_round: The last round an asset was released at.
        :param int at_round: The round that the target is calculated 'as at'.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The target number."""

        args = CalculateTargetArgs(
            zero_bits=zero_bits,
            difficulty_halving_interval=difficulty_halving_interval,
            last_round=last_round,
            at_round=at_round,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def claim(
        self,
        *,
        asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Transfers the requested asset to the claimant, if they are eligible to receive it.
        
        Calls `claim(asset)void` ABI method
        
        :param int asset: The requested asset.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ClaimArgs(
            asset=asset,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_new(
        self,
        *,
        genesis_hash: bytes | bytearray,
        minimum_balance: int,
        zero_bits: int,
        difficulty_halving_interval: int,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Creates a new application.
        
        Calls `new(byte[],uint64,uint64,uint64)void` ABI method
        
        :param bytes | bytearray genesis_hash: The value to use for the first hash.
        :param int minimum_balance: The minimum amount of MicroAlgos an account must have to claim an asset.
        :param int zero_bits: The maximum number of leading zero bits the target number can have.
        :param int difficulty_halving_interval: The number of rounds that elapse between each difficulty halving.
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = NewArgs(
            genesis_hash=genesis_hash,
            minimum_balance=minimum_balance,
            zero_bits=zero_bits,
            difficulty_halving_interval=difficulty_halving_interval,
        )
        result = self.app_client.create(
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: DeployCreate[NewArgs],
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param DeployCreate[NewArgs] create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
