# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "new_project(string,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "pledge(pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim_refund()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_funds_from(address)(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim_certificate(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudmVudHVyZV9mdW5kaW5nLmNvbnRyYWN0LlZlbnR1cmVGdW5kaW5nLmFwcHJvdmFsX3Byb2dyYW06CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjE1MQogICAgLy8gY2xhc3MgVmVudHVyZUZ1bmRpbmcoQVJDNENvbnRyYWN0KToKICAgIG1ldGhvZCAibmV3X3Byb2plY3Qoc3RyaW5nLHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQiCiAgICBtZXRob2QgInBsZWRnZShwYXkpdWludDY0IgogICAgbWV0aG9kICJjbGFpbV9yZWZ1bmQoKXVpbnQ2NCIKICAgIG1ldGhvZCAid2l0aGRyYXdfZnVuZHNfZnJvbShhZGRyZXNzKSh1aW50NjQsdWludDY0KSIKICAgIG1ldGhvZCAiY2xhaW1fY2VydGlmaWNhdGUoYXNzZXQpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fbmV3X3Byb2plY3Rfcm91dGVAMSBtYWluX3BsZWRnZV9yb3V0ZUAyIG1haW5fY2xhaW1fcmVmdW5kX3JvdXRlQDMgbWFpbl93aXRoZHJhd19mdW5kc19mcm9tX3JvdXRlQDQgbWFpbl9jbGFpbV9jZXJ0aWZpY2F0ZV9yb3V0ZUA1CiAgICBlcnIgLy8gcmVqZWN0IHRyYW5zYWN0aW9uCgptYWluX25ld19wcm9qZWN0X3JvdXRlQDE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjE1NAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gaXMgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MTUxCiAgICAvLyBjbGFzcyBWZW50dXJlRnVuZGluZyhBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MTU0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoY3JlYXRlPSJyZXF1aXJlIikKICAgIGNhbGxzdWIgbmV3X3Byb2plY3QKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fcGxlZGdlX3JvdXRlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjE4MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjE1MQogICAgLy8gY2xhc3MgVmVudHVyZUZ1bmRpbmcoQVJDNENvbnRyYWN0KToKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnQgMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50IHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToxODAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBwbGVkZ2UKICAgIGl0b2IKICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fY2xhaW1fcmVmdW5kX3JvdXRlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjIwMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGNsYWltX3JlZnVuZAogICAgaXRvYgogICAgYnl0ZSAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl93aXRoZHJhd19mdW5kc19mcm9tX3JvdXRlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjIxOAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjE1MQogICAgLy8gY2xhc3MgVmVudHVyZUZ1bmRpbmcoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MjE4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgd2l0aGRyYXdfZnVuZHNfZnJvbQogICAgc3dhcAogICAgaXRvYgogICAgc3dhcAogICAgaXRvYgogICAgY29uY2F0CiAgICBieXRlIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2NsYWltX2NlcnRpZmljYXRlX3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjIzOQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjE1MQogICAgLy8gY2xhc3MgVmVudHVyZUZ1bmRpbmcoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmFzIEFzc2V0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToyMzkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBjbGFpbV9jZXJ0aWZpY2F0ZQogICAgaW50IDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy52ZW50dXJlX2Z1bmRpbmcuY29udHJhY3QuVmVudHVyZUZ1bmRpbmcubmV3X3Byb2plY3QocHJvamVjdF9uYW1lOiBieXRlcywgZnVuZGluZ190YXJnZXQ6IHVpbnQ2NCwgZnVuZGluZ19kZWFkbGluZTogdWludDY0LCBtaW5pbXVtX3BsZWRnZTogdWludDY0KSAtPiB2b2lkOgpuZXdfcHJvamVjdDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MTU0LTE2MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICAvLyBkZWYgbmV3X3Byb2plY3QoCiAgICAvLyAgICAgc2VsZiwKICAgIC8vICAgICBwcm9qZWN0X25hbWU6IFN0cmluZywKICAgIC8vICAgICBmdW5kaW5nX3RhcmdldDogVUludDY0LAogICAgLy8gICAgIGZ1bmRpbmdfZGVhZGxpbmU6IFVJbnQ2NCwKICAgIC8vICAgICBtaW5pbXVtX3BsZWRnZTogVUludDY0LAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gNCAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjE3MAogICAgLy8gYXNzZXJ0IGZ1bmRpbmdfZGVhZGxpbmUgPiBHbG9iYWwucm91bmQsICJGdW5kaW5nIGRlYWRsaW5lIG11c3QgYmUgaW4gdGhlIGZ1dHVyZSIKICAgIGZyYW1lX2RpZyAtMgogICAgZ2xvYmFsIFJvdW5kCiAgICA+CiAgICBhc3NlcnQgLy8gRnVuZGluZyBkZWFkbGluZSBtdXN0IGJlIGluIHRoZSBmdXR1cmUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MTcxCiAgICAvLyBhc3NlcnQgZnVuZGluZ190YXJnZXQgPiBtaW5pbXVtX3BsZWRnZSwgIkZ1bmRpbmcgdGFyZ2V0IG11c3QgYmUgPiB0aGUgbWluaW11bSBwbGVkZ2UiCiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2RpZyAtMQogICAgPgogICAgYXNzZXJ0IC8vIEZ1bmRpbmcgdGFyZ2V0IG11c3QgYmUgPiB0aGUgbWluaW11bSBwbGVkZ2UKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MTcyCiAgICAvLyBhc3NlcnQgbWluaW11bV9wbGVkZ2UgPj0gR2xvYmFsLm1pbl9iYWxhbmNlLCAiTWluaW11bSBwbGVkZ2UgbXVzdCBiZSA+PSB0aGUgbWluaW11bSBhY2NvdW50IGJhbGFuY2UiCiAgICBmcmFtZV9kaWcgLTEKICAgIGdsb2JhbCBNaW5CYWxhbmNlCiAgICA+PQogICAgYXNzZXJ0IC8vIE1pbmltdW0gcGxlZGdlIG11c3QgYmUgPj0gdGhlIG1pbmltdW0gYWNjb3VudCBiYWxhbmNlCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjE3NAogICAgLy8gc2VsZi5wcm9qZWN0X25hbWUgPSBwcm9qZWN0X25hbWUKICAgIGJ5dGUgInByb2plY3RfbmFtZSIKICAgIGZyYW1lX2RpZyAtNAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MTc1CiAgICAvLyBzZWxmLmZ1bmRpbmdfdGFyZ2V0ID0gZnVuZGluZ190YXJnZXQKICAgIGJ5dGUgImZ1bmRpbmdfdGFyZ2V0IgogICAgZnJhbWVfZGlnIC0zCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToxNzYKICAgIC8vIHNlbGYuZnVuZGluZ19kZWFkbGluZSA9IGZ1bmRpbmdfZGVhZGxpbmUKICAgIGJ5dGUgImZ1bmRpbmdfZGVhZGxpbmUiCiAgICBmcmFtZV9kaWcgLTIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjE3NwogICAgLy8gc2VsZi5taW5pbXVtX3BsZWRnZSA9IG1pbmltdW1fcGxlZGdlCiAgICBieXRlICJtaW5pbXVtX3BsZWRnZSIKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MTc4CiAgICAvLyBzZWxmLnBsZWRnZWRfYW1vdW50ID0gVUludDY0KDApCiAgICBieXRlICJwbGVkZ2VkX2Ftb3VudCIKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnZlbnR1cmVfZnVuZGluZy5jb250cmFjdC5WZW50dXJlRnVuZGluZy5wbGVkZ2UocGF5bWVudDogdWludDY0KSAtPiB1aW50NjQ6CnBsZWRnZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MTgwLTE4MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgcGxlZGdlKHNlbGYsIHBheW1lbnQ6IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uKSAtPiBVSW50NjQ6CiAgICBwcm90byAxIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MTkwCiAgICAvLyBhc3NlcnQgR2xvYmFsLnJvdW5kIDwgc2VsZi5mdW5kaW5nX2RlYWRsaW5lLCAiVGhlIGZ1bmRpbmcgcm91bmQgaGFzIGNsb3NlZCIKICAgIGdsb2JhbCBSb3VuZAogICAgaW50IDAKICAgIGJ5dGUgImZ1bmRpbmdfZGVhZGxpbmUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIGZ1bmRpbmdfZGVhZGxpbmUgZXhpc3RzCiAgICA8CiAgICBhc3NlcnQgLy8gVGhlIGZ1bmRpbmcgcm91bmQgaGFzIGNsb3NlZAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToxOTEKICAgIC8vIGFzc2VydCBwYXltZW50LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsICJQYXltZW50IHJlY2VpdmVyIG11c3QgYmUgdGhlIGFwcCBhZGRyZXNzIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gUGF5bWVudCByZWNlaXZlciBtdXN0IGJlIHRoZSBhcHAgYWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToxOTIKICAgIC8vIGFzc2VydCBwYXltZW50LmFtb3VudCA+PSBzZWxmLm1pbmltdW1fcGxlZGdlLCAiUGF5bWVudCBhbW91bnQgbXVzdCA+PSB0aGUgbWluaW11bSBwbGVkZ2UiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFtb3VudAogICAgZHVwCiAgICBpbnQgMAogICAgYnl0ZSAibWluaW11bV9wbGVkZ2UiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIG1pbmltdW1fcGxlZGdlIGV4aXN0cwogICAgPj0KICAgIGFzc2VydCAvLyBQYXltZW50IGFtb3VudCBtdXN0ID49IHRoZSBtaW5pbXVtIHBsZWRnZQogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToxOTQKICAgIC8vIHZhdWx0ID0gZmluZF92YXVsdChwYXltZW50LnNlbmRlcikgb3IgY3JlYXRlX3ZhdWx0KHBheW1lbnQuc2VuZGVyKQogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBTZW5kZXIKICAgIGR1cAogICAgY2FsbHN1YiBmaW5kX3ZhdWx0CiAgICBkdXAKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgIT0KICAgIGJ6IHBsZWRnZV90ZXJuYXJ5X2ZhbHNlQDIKICAgIGZyYW1lX2RpZyAyCiAgICBiIHBsZWRnZV90ZXJuYXJ5X21lcmdlQDMKCnBsZWRnZV90ZXJuYXJ5X2ZhbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjE5NAogICAgLy8gdmF1bHQgPSBmaW5kX3ZhdWx0KHBheW1lbnQuc2VuZGVyKSBvciBjcmVhdGVfdmF1bHQocGF5bWVudC5zZW5kZXIpCiAgICBmcmFtZV9kaWcgMQogICAgY2FsbHN1YiBjcmVhdGVfdmF1bHQKCnBsZWRnZV90ZXJuYXJ5X21lcmdlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjE5Ni0xOTcKICAgIC8vICMgUGF5IHRoZSBwbGVkZ2UgdG8gdGhlIHZhdWx0CiAgICAvLyBwYXlfZnJvbShHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLCB0bz12YXVsdCwgYW1vdW50PXBheW1lbnQuYW1vdW50KQogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGRpZyAxCiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICBjb3ZlciAzCiAgICBjYWxsc3ViIHBheV9mcm9tCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjE5OQogICAgLy8gc2VsZi5wbGVkZ2VkX2Ftb3VudCArPSBwYXltZW50LmFtb3VudAogICAgaW50IDAKICAgIGJ5dGUgInBsZWRnZWRfYW1vdW50IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBwbGVkZ2VkX2Ftb3VudCBleGlzdHMKICAgICsKICAgIGJ5dGUgInBsZWRnZWRfYW1vdW50IgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MjAxCiAgICAvLyByZXR1cm4gdmF1bHQuYmFsYW5jZQogICAgYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCiAgICBhc3NlcnQgLy8gYWNjb3VudCBmdW5kZWQKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnZlbnR1cmVfZnVuZGluZy5jb250cmFjdC5maW5kX3ZhdWx0KGJhY2tlcjogYnl0ZXMpIC0+IGJ5dGVzOgpmaW5kX3ZhdWx0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weTo4Ni04NwogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBmaW5kX3ZhdWx0KGJhY2tlcjogQmFja2VyKSAtPiBNYXliZVZhdWx0OgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5Ojk2CiAgICAvLyBtYXliZV92YXVsdCwgZXhpc3RzID0gb3AuQm94LmdldChiYWNrZXIuYnl0ZXMpCiAgICBmcmFtZV9kaWcgLTEKICAgIGJveF9nZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6OTcKICAgIC8vIHJldHVybiBBY2NvdW50KG1heWJlX3ZhdWx0KSBpZiBleGlzdHMgZWxzZSBHbG9iYWwuemVyb19hZGRyZXNzCiAgICBieiBmaW5kX3ZhdWx0X3Rlcm5hcnlfZmFsc2VAMgogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgbGVuCiAgICBpbnQgMzIKICAgID09CiAgICBhc3NlcnQgLy8gQWRkcmVzcyBsZW5ndGggaXMgMzIgYnl0ZXMKICAgIGIgZmluZF92YXVsdF90ZXJuYXJ5X21lcmdlQDMKCmZpbmRfdmF1bHRfdGVybmFyeV9mYWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weTo5NwogICAgLy8gcmV0dXJuIEFjY291bnQobWF5YmVfdmF1bHQpIGlmIGV4aXN0cyBlbHNlIEdsb2JhbC56ZXJvX2FkZHJlc3MKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwoKZmluZF92YXVsdF90ZXJuYXJ5X21lcmdlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5Ojk3CiAgICAvLyByZXR1cm4gQWNjb3VudChtYXliZV92YXVsdCkgaWYgZXhpc3RzIGVsc2UgR2xvYmFsLnplcm9fYWRkcmVzcwogICAgc3dhcAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnZlbnR1cmVfZnVuZGluZy5jb250cmFjdC5jcmVhdGVfdmF1bHQoYmFja2VyOiBieXRlcykgLT4gYnl0ZXM6CmNyZWF0ZV92YXVsdDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6NjAtNjEKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgY3JlYXRlX3ZhdWx0KGJhY2tlcjogQmFja2VyKSAtPiBWYXVsdDoKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weTo3MC03NwogICAgLy8gIyBDYWxsIHRoZSB2YXVsdCBmYWN0b3J5IGNvbnRyYWN0IHRvIGNyZWF0ZSBhIG5ldyB2YXVsdAogICAgLy8gYWRkcmVzcywgX3R4biA9IGFyYzQuYWJpX2NhbGwoCiAgICAvLyAgICAgVmF1bHRGYWN0b3J5Lm5ldywKICAgIC8vICAgICBhcHByb3ZhbF9wcm9ncmFtPVZBVUxUX0ZBQ1RPUllfQVBQUk9WQUwsCiAgICAvLyAgICAgY2xlYXJfc3RhdGVfcHJvZ3JhbT1WQVVMVF9GQUNUT1JZX0NMRUFSLAogICAgLy8gICAgIG9uX2NvbXBsZXRpb249T25Db21wbGV0ZUFjdGlvbi5EZWxldGVBcHBsaWNhdGlvbiwKICAgIC8vICAgICBmZWU9MCwKICAgIC8vICkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6NzQKICAgIC8vIGNsZWFyX3N0YXRlX3Byb2dyYW09VkFVTFRfRkFDVE9SWV9DTEVBUiwKICAgIGJ5dGUgMHgwYTgxMDE0MwogICAgaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbVBhZ2VzCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjczCiAgICAvLyBhcHByb3ZhbF9wcm9ncmFtPVZBVUxUX0ZBQ1RPUllfQVBQUk9WQUwsCiAgICBieXRlIDB4MGEyMDAxMDE4MDA0NTYxZDJmZWEzNjFhMDA4ZTAxMDAwMTAwMzExOTgxMDUxMjQ0MzExODE0NDQ4ODAwMGI4MDA0MTUxZjdjNzU0YzUwYjAyMjQzOGEwMDAxYjEzMTAwNDk4MTAwYjIwMWIyMjBiMjA3MjJiMjEwYjNiNDAwODkKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtUGFnZXMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6NzUKICAgIC8vIG9uX2NvbXBsZXRpb249T25Db21wbGV0ZUFjdGlvbi5EZWxldGVBcHBsaWNhdGlvbiwKICAgIGludCBEZWxldGVBcHBsaWNhdGlvbgogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6NzYKICAgIC8vIGZlZT0wLAogICAgaW50IDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjcwLTc3CiAgICAvLyAjIENhbGwgdGhlIHZhdWx0IGZhY3RvcnkgY29udHJhY3QgdG8gY3JlYXRlIGEgbmV3IHZhdWx0CiAgICAvLyBhZGRyZXNzLCBfdHhuID0gYXJjNC5hYmlfY2FsbCgKICAgIC8vICAgICBWYXVsdEZhY3RvcnkubmV3LAogICAgLy8gICAgIGFwcHJvdmFsX3Byb2dyYW09VkFVTFRfRkFDVE9SWV9BUFBST1ZBTCwKICAgIC8vICAgICBjbGVhcl9zdGF0ZV9wcm9ncmFtPVZBVUxUX0ZBQ1RPUllfQ0xFQVIsCiAgICAvLyAgICAgb25fY29tcGxldGlvbj1PbkNvbXBsZXRlQWN0aW9uLkRlbGV0ZUFwcGxpY2F0aW9uLAogICAgLy8gICAgIGZlZT0wLAogICAgLy8gKQogICAgbWV0aG9kICJuZXcoKWFkZHJlc3MiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaW50IGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIExhc3RMb2cKICAgIGR1cAogICAgZXh0cmFjdCA0IDAKICAgIHN3YXAKICAgIGV4dHJhY3QgMCA0CiAgICBieXRlIDB4MTUxZjdjNzUKICAgID09CiAgICBhc3NlcnQgLy8gQVJDNCBwcmVmaXggaXMgdmFsaWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6NzgKICAgIC8vIHZhdWx0ID0gQWNjb3VudChhZGRyZXNzLmJ5dGVzKQogICAgZHVwCiAgICBsZW4KICAgIGludCAzMgogICAgPT0KICAgIGFzc2VydCAvLyBBZGRyZXNzIGxlbmd0aCBpcyAzMiBieXRlcwogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weTo4MC04MQogICAgLy8gIyBTYXZlIChiYWNrZXIsIHZhdWx0KSBwYWlyIGluIGJveCBzdG9yYWdlCiAgICAvLyBvcC5Cb3gucHV0KGJhY2tlci5ieXRlcywgdmF1bHQuYnl0ZXMpCiAgICBmcmFtZV9kaWcgLTEKICAgIGRpZyAxCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjgzCiAgICAvLyByZXR1cm4gdmF1bHQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy52ZW50dXJlX2Z1bmRpbmcuY29udHJhY3QucGF5X2Zyb20oc2VuZGVyOiBieXRlcywgdG86IGJ5dGVzLCBhbW91bnQ6IHVpbnQ2NCkgLT4gdm9pZDoKcGF5X2Zyb206CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjQzLTQ0CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIHBheV9mcm9tKHNlbmRlcjogQWNjb3VudCwgLywgKiwgdG86IEFjY291bnQsIGFtb3VudDogVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjUyLTU3CiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgc2VuZGVyPXNlbmRlciwKICAgIC8vICAgICByZWNlaXZlcj10bywKICAgIC8vICAgICBhbW91bnQ9YW1vdW50LAogICAgLy8gICAgIGZlZT0wLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weTo1NgogICAgLy8gZmVlPTAsCiAgICBpbnQgMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGZyYW1lX2RpZyAtMQogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIGZyYW1lX2RpZyAtMgogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgZnJhbWVfZGlnIC0zCiAgICBpdHhuX2ZpZWxkIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weTo1MgogICAgLy8gaXR4bi5QYXltZW50KAogICAgaW50IHBheQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weTo1Mi01NwogICAgLy8gaXR4bi5QYXltZW50KAogICAgLy8gICAgIHNlbmRlcj1zZW5kZXIsCiAgICAvLyAgICAgcmVjZWl2ZXI9dG8sCiAgICAvLyAgICAgYW1vdW50PWFtb3VudCwKICAgIC8vICAgICBmZWU9MCwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMudmVudHVyZV9mdW5kaW5nLmNvbnRyYWN0LlZlbnR1cmVGdW5kaW5nLmNsYWltX3JlZnVuZCgpIC0+IHVpbnQ2NDoKY2xhaW1fcmVmdW5kOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToyMDMtMjA0CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBjbGFpbV9yZWZ1bmQoc2VsZikgLT4gVUludDY0OgogICAgcHJvdG8gMCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjIxMAogICAgLy8gYXNzZXJ0IEdsb2JhbC5yb3VuZCA+PSBzZWxmLmZ1bmRpbmdfZGVhZGxpbmUsICJGdW5kaW5nIGRlYWRsaW5lIGhhcyBub3QgcGFzc2VkIgogICAgZ2xvYmFsIFJvdW5kCiAgICBpbnQgMAogICAgYnl0ZSAiZnVuZGluZ19kZWFkbGluZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgZnVuZGluZ19kZWFkbGluZSBleGlzdHMKICAgID49CiAgICBhc3NlcnQgLy8gRnVuZGluZyBkZWFkbGluZSBoYXMgbm90IHBhc3NlZAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToyMTEKICAgIC8vIGFzc2VydCBzZWxmLnBsZWRnZWRfYW1vdW50IDwgc2VsZi5mdW5kaW5nX3RhcmdldCwgIkZ1bmRpbmcgdGFyZ2V0IGhhcyBiZWVuIG1ldCIKICAgIGludCAwCiAgICBieXRlICJwbGVkZ2VkX2Ftb3VudCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgcGxlZGdlZF9hbW91bnQgZXhpc3RzCiAgICBpbnQgMAogICAgYnl0ZSAiZnVuZGluZ190YXJnZXQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIGZ1bmRpbmdfdGFyZ2V0IGV4aXN0cwogICAgPAogICAgYXNzZXJ0IC8vIEZ1bmRpbmcgdGFyZ2V0IGhhcyBiZWVuIG1ldAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToyMTMKICAgIC8vIHZhdWx0ID0gZmluZF92YXVsdChUeG4uc2VuZGVyKQogICAgdHhuIFNlbmRlcgogICAgY2FsbHN1YiBmaW5kX3ZhdWx0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjIxNAogICAgLy8gYXNzZXJ0IHZhdWx0LCAiVmF1bHQgbm90IGZvdW5kIgogICAgZHVwCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgICE9CiAgICBhc3NlcnQgLy8gVmF1bHQgbm90IGZvdW5kCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjIxNgogICAgLy8gcmV0dXJuIGNsb3NlKFR4bi5zZW5kZXIsIHZhdWx0LCB0bz1UeG4uc2VuZGVyKQogICAgdHhuIFNlbmRlcgogICAgZHVwCiAgICBjb3ZlciAyCiAgICBjYWxsc3ViIGNsb3NlCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMudmVudHVyZV9mdW5kaW5nLmNvbnRyYWN0LmNsb3NlKGJhY2tlcjogYnl0ZXMsIHZhdWx0OiBieXRlcywgdG86IGJ5dGVzKSAtPiB1aW50NjQ6CmNsb3NlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToxMDAtMTAxCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGNsb3NlKGJhY2tlcjogQmFja2VyLCB2YXVsdDogVmF1bHQsIHRvOiBBY2NvdW50KSAtPiBVSW50NjQ6CiAgICBwcm90byAzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MTEyCiAgICAvLyBfZGVsZXRlZCA9IG9wLkJveC5kZWxldGUoYmFja2VyLmJ5dGVzKQogICAgZnJhbWVfZGlnIC0zCiAgICBib3hfZGVsCiAgICBwb3AKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MTE0LTEyMQogICAgLy8gaXR4bi5QYXltZW50KAogICAgLy8gICAgIHNlbmRlcj12YXVsdCwKICAgIC8vICAgICByZWNlaXZlcj10bywKICAgIC8vICAgICBhbW91bnQ9dmF1bHQuYmFsYW5jZSwKICAgIC8vICAgICBjbG9zZV9yZW1haW5kZXJfdG89dG8sCiAgICAvLyAgICAgZmVlPTAsCiAgICAvLyApCiAgICAvLyAuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MTE3CiAgICAvLyBhbW91bnQ9dmF1bHQuYmFsYW5jZSwKICAgIGZyYW1lX2RpZyAtMgogICAgYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCiAgICBhc3NlcnQgLy8gYWNjb3VudCBmdW5kZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MTE5CiAgICAvLyBmZWU9MCwKICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIENsb3NlUmVtYWluZGVyVG8KICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICBmcmFtZV9kaWcgLTEKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIGZyYW1lX2RpZyAtMgogICAgaXR4bl9maWVsZCBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MTE0CiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICBpbnQgcGF5CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjExNC0xMjEKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIC8vICAgICBzZW5kZXI9dmF1bHQsCiAgICAvLyAgICAgcmVjZWl2ZXI9dG8sCiAgICAvLyAgICAgYW1vdW50PXZhdWx0LmJhbGFuY2UsCiAgICAvLyAgICAgY2xvc2VfcmVtYWluZGVyX3RvPXRvLAogICAgLy8gICAgIGZlZT0wLAogICAgLy8gKQogICAgLy8gLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBBbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MTEzLTEyMwogICAgLy8gcmV0dXJuICgKICAgIC8vICAgICBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgICAgIHNlbmRlcj12YXVsdCwKICAgIC8vICAgICAgICAgcmVjZWl2ZXI9dG8sCiAgICAvLyAgICAgICAgIGFtb3VudD12YXVsdC5iYWxhbmNlLAogICAgLy8gICAgICAgICBjbG9zZV9yZW1haW5kZXJfdG89dG8sCiAgICAvLyAgICAgICAgIGZlZT0wLAogICAgLy8gICAgICkKICAgIC8vICAgICAuc3VibWl0KCkKICAgIC8vICAgICAuYW1vdW50CiAgICAvLyApCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMudmVudHVyZV9mdW5kaW5nLmNvbnRyYWN0LlZlbnR1cmVGdW5kaW5nLndpdGhkcmF3X2Z1bmRzX2Zyb20oYmFja2VyOiBieXRlcykgLT4gdWludDY0LCB1aW50NjQ6CndpdGhkcmF3X2Z1bmRzX2Zyb206CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjIxOC0yMTkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHdpdGhkcmF3X2Z1bmRzX2Zyb20oc2VsZiwgYmFja2VyOiBhcmM0LkFkZHJlc3MpIC0+IHR1cGxlW1VJbnQ2NCwgVUludDY0XToKICAgIHByb3RvIDEgMgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToyMjgKICAgIC8vIGFzc2VydCBHbG9iYWwucm91bmQgPj0gc2VsZi5mdW5kaW5nX2RlYWRsaW5lLCAiRnVuZGluZyBkZWFkbGluZSBoYXMgbm90IHBhc3NlZCIKICAgIGdsb2JhbCBSb3VuZAogICAgaW50IDAKICAgIGJ5dGUgImZ1bmRpbmdfZGVhZGxpbmUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIGZ1bmRpbmdfZGVhZGxpbmUgZXhpc3RzCiAgICA+PQogICAgYXNzZXJ0IC8vIEZ1bmRpbmcgZGVhZGxpbmUgaGFzIG5vdCBwYXNzZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MjI5CiAgICAvLyBhc3NlcnQgc2VsZi5wbGVkZ2VkX2Ftb3VudCA+PSBzZWxmLmZ1bmRpbmdfdGFyZ2V0LCAiRnVuZGluZyB0YXJnZXQgaGFzIG5vdCBiZWVuIG1ldCIKICAgIGludCAwCiAgICBieXRlICJwbGVkZ2VkX2Ftb3VudCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgcGxlZGdlZF9hbW91bnQgZXhpc3RzCiAgICBpbnQgMAogICAgYnl0ZSAiZnVuZGluZ190YXJnZXQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIGZ1bmRpbmdfdGFyZ2V0IGV4aXN0cwogICAgPj0KICAgIGFzc2VydCAvLyBGdW5kaW5nIHRhcmdldCBoYXMgbm90IGJlZW4gbWV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjIzMQogICAgLy8gYmFja2VyX2FjY291bnQgPSBBY2NvdW50KGJhY2tlci5ieXRlcykKICAgIGZyYW1lX2RpZyAtMQogICAgbGVuCiAgICBpbnQgMzIKICAgID09CiAgICBhc3NlcnQgLy8gQWRkcmVzcyBsZW5ndGggaXMgMzIgYnl0ZXMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MjMyCiAgICAvLyB2YXVsdCA9IGZpbmRfdmF1bHQoYmFja2VyX2FjY291bnQpCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgZmluZF92YXVsdAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToyMzMKICAgIC8vIGFzc2VydCB2YXVsdCwgIlZhdWx0IG5vdCBmb3VuZCIKICAgIGR1cAogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICAhPQogICAgYXNzZXJ0IC8vIFZhdWx0IG5vdCBmb3VuZAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToyMzUKICAgIC8vIGludmVzdGVkX2Ftb3VudCA9IGNsb3NlKGJhY2tlcl9hY2NvdW50LCB2YXVsdCwgdG89R2xvYmFsLmNyZWF0b3JfYWRkcmVzcykKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgZnJhbWVfZGlnIC0xCiAgICBjb3ZlciAyCiAgICBjYWxsc3ViIGNsb3NlCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjIzNgogICAgLy8gY2VydGlmaWNhdGUgPSBtaW50X2NlcnRpZmljYXRlKGJhY2tlcl9hY2NvdW50LCBpbnZlc3RlZF9hbW91bnQpCiAgICBmcmFtZV9kaWcgLTEKICAgIGRpZyAxCiAgICBjYWxsc3ViIG1pbnRfY2VydGlmaWNhdGUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MjM3CiAgICAvLyByZXR1cm4gaW52ZXN0ZWRfYW1vdW50LCBjZXJ0aWZpY2F0ZS5pZAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnZlbnR1cmVfZnVuZGluZy5jb250cmFjdC5taW50X2NlcnRpZmljYXRlKGludmVzdG9yOiBieXRlcywgaW52ZXN0ZWRfYW1vdW50OiB1aW50NjQpIC0+IHVpbnQ2NDoKbWludF9jZXJ0aWZpY2F0ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MTI2LTEyNwogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBtaW50X2NlcnRpZmljYXRlKGludmVzdG9yOiBBY2NvdW50LCBpbnZlc3RlZF9hbW91bnQ6IFVJbnQ2NCkgLT4gQXNzZXQ6CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MTM4LTE0NgogICAgLy8gaXR4bi5Bc3NldENvbmZpZygKICAgIC8vICAgICB0b3RhbD0xLAogICAgLy8gICAgIGRlY2ltYWxzPTAsCiAgICAvLyAgICAgYXNzZXRfbmFtZT0iQ0VSVCIsCiAgICAvLyAgICAgdW5pdF9uYW1lPWFyYzQuVUludDY0KGludmVzdGVkX2Ftb3VudCkuYnl0ZXMsCiAgICAvLyAgICAgcmVzZXJ2ZT1pbnZlc3RvciwgICMgSGFzIG5vIGF1dGhvcml0eSBpbiB0aGUgQWxnb3JhbmQgcHJvdG9jb2wKICAgIC8vICAgICBmZWU9MCwKICAgIC8vICkKICAgIC8vIC5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToxNDIKICAgIC8vIHVuaXRfbmFtZT1hcmM0LlVJbnQ2NChpbnZlc3RlZF9hbW91bnQpLmJ5dGVzLAogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjE0NAogICAgLy8gZmVlPTAsCiAgICBpbnQgMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGZyYW1lX2RpZyAtMgogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFJlc2VydmUKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRVbml0TmFtZQogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToxNDEKICAgIC8vIGFzc2V0X25hbWU9IkNFUlQiLAogICAgYnl0ZSAiQ0VSVCIKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjE0MAogICAgLy8gZGVjaW1hbHM9MCwKICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0RGVjaW1hbHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MTM5CiAgICAvLyB0b3RhbD0xLAogICAgaW50IDEKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRUb3RhbAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToxMzgKICAgIC8vIGl0eG4uQXNzZXRDb25maWcoCiAgICBpbnQgYWNmZwogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToxMzgtMTQ2CiAgICAvLyBpdHhuLkFzc2V0Q29uZmlnKAogICAgLy8gICAgIHRvdGFsPTEsCiAgICAvLyAgICAgZGVjaW1hbHM9MCwKICAgIC8vICAgICBhc3NldF9uYW1lPSJDRVJUIiwKICAgIC8vICAgICB1bml0X25hbWU9YXJjNC5VSW50NjQoaW52ZXN0ZWRfYW1vdW50KS5ieXRlcywKICAgIC8vICAgICByZXNlcnZlPWludmVzdG9yLCAgIyBIYXMgbm8gYXV0aG9yaXR5IGluIHRoZSBBbGdvcmFuZCBwcm90b2NvbAogICAgLy8gICAgIGZlZT0wLAogICAgLy8gKQogICAgLy8gLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBDcmVhdGVkQXNzZXRJRAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToxMzctMTQ4CiAgICAvLyByZXR1cm4gKAogICAgLy8gICAgIGl0eG4uQXNzZXRDb25maWcoCiAgICAvLyAgICAgICAgIHRvdGFsPTEsCiAgICAvLyAgICAgICAgIGRlY2ltYWxzPTAsCiAgICAvLyAgICAgICAgIGFzc2V0X25hbWU9IkNFUlQiLAogICAgLy8gICAgICAgICB1bml0X25hbWU9YXJjNC5VSW50NjQoaW52ZXN0ZWRfYW1vdW50KS5ieXRlcywKICAgIC8vICAgICAgICAgcmVzZXJ2ZT1pbnZlc3RvciwgICMgSGFzIG5vIGF1dGhvcml0eSBpbiB0aGUgQWxnb3JhbmQgcHJvdG9jb2wKICAgIC8vICAgICAgICAgZmVlPTAsCiAgICAvLyAgICAgKQogICAgLy8gICAgIC5zdWJtaXQoKQogICAgLy8gICAgIC5jcmVhdGVkX2Fzc2V0CiAgICAvLyApCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMudmVudHVyZV9mdW5kaW5nLmNvbnRyYWN0LlZlbnR1cmVGdW5kaW5nLmNsYWltX2NlcnRpZmljYXRlKGNlcnRpZmljYXRlOiB1aW50NjQpIC0+IHZvaWQ6CmNsYWltX2NlcnRpZmljYXRlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToyMzktMjQwCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBjbGFpbV9jZXJ0aWZpY2F0ZShzZWxmLCBjZXJ0aWZpY2F0ZTogQXNzZXQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MjQ2CiAgICAvLyBhc3NlcnQgR2xvYmFsLnJvdW5kID49IHNlbGYuZnVuZGluZ19kZWFkbGluZSwgIkZ1bmRpbmcgZGVhZGxpbmUgaGFzIG5vdCBwYXNzZWQiCiAgICBnbG9iYWwgUm91bmQKICAgIGludCAwCiAgICBieXRlICJmdW5kaW5nX2RlYWRsaW5lIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBmdW5kaW5nX2RlYWRsaW5lIGV4aXN0cwogICAgPj0KICAgIGFzc2VydCAvLyBGdW5kaW5nIGRlYWRsaW5lIGhhcyBub3QgcGFzc2VkCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjI0NwogICAgLy8gYXNzZXJ0IHNlbGYucGxlZGdlZF9hbW91bnQgPj0gc2VsZi5mdW5kaW5nX3RhcmdldCwgIkZ1bmRpbmcgdGFyZ2V0IGhhcyBub3QgYmVlbiBtZXQiCiAgICBpbnQgMAogICAgYnl0ZSAicGxlZGdlZF9hbW91bnQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHBsZWRnZWRfYW1vdW50IGV4aXN0cwogICAgaW50IDAKICAgIGJ5dGUgImZ1bmRpbmdfdGFyZ2V0IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBmdW5kaW5nX3RhcmdldCBleGlzdHMKICAgID49CiAgICBhc3NlcnQgLy8gRnVuZGluZyB0YXJnZXQgaGFzIG5vdCBiZWVuIG1ldAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToyNDktMjU0CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1jZXJ0aWZpY2F0ZSwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1jZXJ0aWZpY2F0ZS5yZXNlcnZlLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD0xLAogICAgLy8gICAgIGZlZT0wLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlbnR1cmVfZnVuZGluZy9jb250cmFjdC5weToyNTEKICAgIC8vIGFzc2V0X3JlY2VpdmVyPWNlcnRpZmljYXRlLnJlc2VydmUsCiAgICBmcmFtZV9kaWcgLTEKICAgIGFzc2V0X3BhcmFtc19nZXQgQXNzZXRSZXNlcnZlCiAgICBhc3NlcnQgLy8gYXNzZXQgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjI1MwogICAgLy8gZmVlPTAsCiAgICBpbnQgMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MjUyCiAgICAvLyBhc3NldF9hbW91bnQ9MSwKICAgIGludCAxCiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIGZyYW1lX2RpZyAtMQogICAgaXR4bl9maWVsZCBYZmVyQXNzZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MjQ5CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICBpbnQgYXhmZXIKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZW50dXJlX2Z1bmRpbmcvY29udHJhY3QucHk6MjQ5LTI1NAogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIHhmZXJfYXNzZXQ9Y2VydGlmaWNhdGUsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9Y2VydGlmaWNhdGUucmVzZXJ2ZSwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9MSwKICAgIC8vICAgICBmZWU9MCwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudmVudHVyZV9mdW5kaW5nLmNvbnRyYWN0LlZlbnR1cmVGdW5kaW5nLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVudHVyZV9mdW5kaW5nL2NvbnRyYWN0LnB5OjE1MQogICAgLy8gY2xhc3MgVmVudHVyZUZ1bmRpbmcoQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "funding_deadline": {
                    "type": "uint64",
                    "key": "funding_deadline"
                },
                "funding_target": {
                    "type": "uint64",
                    "key": "funding_target"
                },
                "minimum_pledge": {
                    "type": "uint64",
                    "key": "minimum_pledge"
                },
                "pledged_amount": {
                    "type": "uint64",
                    "key": "pledged_amount"
                },
                "project_name": {
                    "type": "bytes",
                    "key": "project_name"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "VentureFunding",
        "methods": [
            {
                "name": "new_project",
                "args": [
                    {
                        "type": "string",
                        "name": "project_name",
                        "desc": "The name of the project."
                    },
                    {
                        "type": "uint64",
                        "name": "funding_target",
                        "desc": "The funding target amount in MicroAlgos."
                    },
                    {
                        "type": "uint64",
                        "name": "funding_deadline",
                        "desc": "The round that the target amount must be raised by, in order for the project to access the funds."
                    },
                    {
                        "type": "uint64",
                        "name": "minimum_pledge",
                        "desc": "The minimum amount of MicroAlgos that a backer can pledge to the project."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Creates a new venture funding project."
            },
            {
                "name": "pledge",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "The payment transaction transferring the pledged amount to the contract."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The total amount pledged by the backer."
                },
                "desc": "Makes a pledge to the project."
            },
            {
                "name": "claim_refund",
                "args": [],
                "returns": {
                    "type": "uint64",
                    "desc": "The amount of MicroAlgos refunded."
                },
                "desc": "Refunds a backer if the funding deadline has passed and the target has not been met."
            },
            {
                "name": "withdraw_funds_from",
                "args": [
                    {
                        "type": "address",
                        "name": "backer",
                        "desc": "The backer's address."
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64)",
                    "desc": "The total amount of MicroAlgos withdrawn and the asset ID of the certificate minted."
                },
                "desc": "Closes the backer's vault and transfers its balance to the application creator."
            },
            {
                "name": "claim_certificate",
                "args": [
                    {
                        "type": "asset",
                        "name": "certificate",
                        "desc": "The certificate asset to withdraw."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Transfers the certificate to the investor."
            }
        ],
        "networks": {},
        "desc": "A smart contract for decentralised venture funding."
    },
    "bare_call_config": {}
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


@dataclasses.dataclass(kw_only=True)
class DeployCreate(algokit_utils.DeployCreateCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data)
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class PledgeArgs(_ArgsBase[int]):
    """Makes a pledge to the project."""

    payment: TransactionWithSigner
    """The payment transaction transferring the pledged amount to the contract."""

    @staticmethod
    def method() -> str:
        return "pledge(pay)uint64"


@dataclasses.dataclass(kw_only=True)
class ClaimRefundArgs(_ArgsBase[int]):
    """Refunds a backer if the funding deadline has passed and the target has not been met."""

    @staticmethod
    def method() -> str:
        return "claim_refund()uint64"


@dataclasses.dataclass(kw_only=True)
class WithdrawFundsFromArgs(_ArgsBase[tuple[int, int]]):
    """Closes the backer's vault and transfers its balance to the application creator."""

    backer: str
    """The backer's address."""

    @staticmethod
    def method() -> str:
        return "withdraw_funds_from(address)(uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class ClaimCertificateArgs(_ArgsBase[None]):
    """Transfers the certificate to the investor."""

    certificate: int
    """The certificate asset to withdraw."""

    @staticmethod
    def method() -> str:
        return "claim_certificate(asset)void"


@dataclasses.dataclass(kw_only=True)
class NewProjectArgs(_ArgsBase[None]):
    """Creates a new venture funding project."""

    project_name: str
    """The name of the project."""
    funding_target: int
    """The funding target amount in MicroAlgos."""
    funding_deadline: int
    """The round that the target amount must be raised by, in order for the project to access the funds."""
    minimum_pledge: int
    """The minimum amount of MicroAlgos that a backer can pledge to the project."""

    @staticmethod
    def method() -> str:
        return "new_project(string,uint64,uint64,uint64)void"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.funding_deadline = typing.cast(int, data.get(b"funding_deadline"))
        self.funding_target = typing.cast(int, data.get(b"funding_target"))
        self.minimum_pledge = typing.cast(int, data.get(b"minimum_pledge"))
        self.pledged_amount = typing.cast(int, data.get(b"pledged_amount"))
        self.project_name = ByteReader(typing.cast(bytes, data.get(b"project_name")))


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def pledge(
        self,
        *,
        payment: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Makes a pledge to the project.
        
        Adds a call to `pledge(pay)uint64` ABI method
        
        :param TransactionWithSigner payment: The payment transaction transferring the pledged amount to the contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = PledgeArgs(
            payment=payment,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def claim_refund(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Refunds a backer if the funding deadline has passed and the target has not been met.
        
        Adds a call to `claim_refund()uint64` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ClaimRefundArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def withdraw_funds_from(
        self,
        *,
        backer: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Closes the backer's vault and transfers its balance to the application creator.
        
        Adds a call to `withdraw_funds_from(address)(uint64,uint64)` ABI method
        
        :param str backer: The backer's address.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = WithdrawFundsFromArgs(
            backer=backer,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def claim_certificate(
        self,
        *,
        certificate: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Transfers the certificate to the investor.
        
        Adds a call to `claim_certificate(asset)void` ABI method
        
        :param int certificate: The certificate asset to withdraw.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ClaimCertificateArgs(
            certificate=certificate,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_new_project(
        self,
        *,
        project_name: str,
        funding_target: int,
        funding_deadline: int,
        minimum_pledge: int,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Creates a new venture funding project.
        
        Adds a call to `new_project(string,uint64,uint64,uint64)void` ABI method
        
        :param str project_name: The name of the project.
        :param int funding_target: The funding target amount in MicroAlgos.
        :param int funding_deadline: The round that the target amount must be raised by, in order for the project to access the funds.
        :param int minimum_pledge: The minimum amount of MicroAlgos that a backer can pledge to the project.
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = NewProjectArgs(
            project_name=project_name,
            funding_target=funding_target,
            funding_deadline=funding_deadline,
            minimum_pledge=minimum_pledge,
        )
        self.app_client.compose_create(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class VentureFundingClient:
    """A smart contract for decentralised venture funding.
    
    A class for interacting with the VentureFunding app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        VentureFundingClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def pledge(
        self,
        *,
        payment: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Makes a pledge to the project.
        
        Calls `pledge(pay)uint64` ABI method
        
        :param TransactionWithSigner payment: The payment transaction transferring the pledged amount to the contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The total amount pledged by the backer."""

        args = PledgeArgs(
            payment=payment,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def claim_refund(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Refunds a backer if the funding deadline has passed and the target has not been met.
        
        Calls `claim_refund()uint64` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The amount of MicroAlgos refunded."""

        args = ClaimRefundArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def withdraw_funds_from(
        self,
        *,
        backer: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[tuple[int, int]]:
        """Closes the backer's vault and transfers its balance to the application creator.
        
        Calls `withdraw_funds_from(address)(uint64,uint64)` ABI method
        
        :param str backer: The backer's address.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[tuple[int, int]]: The total amount of MicroAlgos withdrawn and the asset ID of the certificate minted."""

        args = WithdrawFundsFromArgs(
            backer=backer,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def claim_certificate(
        self,
        *,
        certificate: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Transfers the certificate to the investor.
        
        Calls `claim_certificate(asset)void` ABI method
        
        :param int certificate: The certificate asset to withdraw.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ClaimCertificateArgs(
            certificate=certificate,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_new_project(
        self,
        *,
        project_name: str,
        funding_target: int,
        funding_deadline: int,
        minimum_pledge: int,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Creates a new venture funding project.
        
        Calls `new_project(string,uint64,uint64,uint64)void` ABI method
        
        :param str project_name: The name of the project.
        :param int funding_target: The funding target amount in MicroAlgos.
        :param int funding_deadline: The round that the target amount must be raised by, in order for the project to access the funds.
        :param int minimum_pledge: The minimum amount of MicroAlgos that a backer can pledge to the project.
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = NewProjectArgs(
            project_name=project_name,
            funding_target=funding_target,
            funding_deadline=funding_deadline,
            minimum_pledge=minimum_pledge,
        )
        result = self.app_client.create(
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: DeployCreate[NewProjectArgs],
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param DeployCreate[NewProjectArgs] create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
