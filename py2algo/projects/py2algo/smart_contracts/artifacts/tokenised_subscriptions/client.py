# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "mint_tokens(account,uint64,uint64,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_tokens(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "active_from(asset)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "payment_amount(asset)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "payment_frequency(asset)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "cycle_number(asset,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim_payment(axfer)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudG9rZW5pc2VkX3N1YnNjcmlwdGlvbnMuY29udHJhY3QuVG9rZW5pc2VkU3Vic2NyaXB0aW9ucy5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Rva2VuaXNlZF9zdWJzY3JpcHRpb25zL2NvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIFRva2VuaXNlZFN1YnNjcmlwdGlvbnMoQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "TokenisedSubscriptions",
        "methods": [
            {
                "name": "mint_tokens",
                "args": [
                    {
                        "type": "account",
                        "name": "initial_redeemer",
                        "desc": "_description_"
                    },
                    {
                        "type": "uint64",
                        "name": "active_from",
                        "desc": "_description_"
                    },
                    {
                        "type": "uint64",
                        "name": "payment_amount",
                        "desc": "_description_"
                    },
                    {
                        "type": "uint64",
                        "name": "payment_frequency",
                        "desc": "_description_"
                    },
                    {
                        "type": "uint64",
                        "name": "max_payments",
                        "desc": "_description_"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "_description_"
                },
                "desc": "Creates"
            },
            {
                "name": "withdraw_tokens",
                "args": [
                    {
                        "type": "asset",
                        "name": "subscription",
                        "desc": "The subscription token."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Transfers the subscription tokens to the initial redeemer."
            },
            {
                "name": "active_from",
                "args": [
                    {
                        "type": "asset",
                        "name": "subscription",
                        "desc": "The subscription token."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The 'active from' round number."
                },
                "desc": "Parses the 'active from' round number from the subscription token."
            },
            {
                "name": "payment_amount",
                "args": [
                    {
                        "type": "asset",
                        "name": "subscription",
                        "desc": "The subscription token."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The payment amount in MicroAlgos."
                },
                "desc": "Parses the payment amount from the subscription token."
            },
            {
                "name": "payment_frequency",
                "args": [
                    {
                        "type": "asset",
                        "name": "subscription",
                        "desc": "The subscription token."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The payment frequency (number of rounds)."
                },
                "desc": "Parses the payment frequency from the subscription token."
            },
            {
                "name": "cycle_number",
                "args": [
                    {
                        "type": "asset",
                        "name": "subscription",
                        "desc": "The subscription token."
                    },
                    {
                        "type": "uint64",
                        "name": "at_round",
                        "desc": "The round to calculate the payment cycle 'as at'."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The payment cycle number."
                },
                "desc": "Calculates the payment cycle number 'as at' a specific round."
            },
            {
                "name": "claim_payment",
                "args": [
                    {
                        "type": "axfer",
                        "name": "axfer",
                        "desc": "The transaction transferring a unit of the subscription token to the contract account."
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Makes a payment to the subscription token owner, if eligible."
            }
        ],
        "networks": {},
        "desc": "A contract for subscription payments using redeemable NFTs."
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data)
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class MintTokensArgs(_ArgsBase[int]):
    """Creates"""

    initial_redeemer: str | bytes
    """_description_"""
    active_from: int
    """_description_"""
    payment_amount: int
    """_description_"""
    payment_frequency: int
    """_description_"""
    max_payments: int
    """_description_"""

    @staticmethod
    def method() -> str:
        return "mint_tokens(account,uint64,uint64,uint64,uint64)uint64"


@dataclasses.dataclass(kw_only=True)
class WithdrawTokensArgs(_ArgsBase[None]):
    """Transfers the subscription tokens to the initial redeemer."""

    subscription: int
    """The subscription token."""

    @staticmethod
    def method() -> str:
        return "withdraw_tokens(asset)void"


@dataclasses.dataclass(kw_only=True)
class ActiveFromArgs(_ArgsBase[int]):
    """Parses the 'active from' round number from the subscription token."""

    subscription: int
    """The subscription token."""

    @staticmethod
    def method() -> str:
        return "active_from(asset)uint64"


@dataclasses.dataclass(kw_only=True)
class PaymentAmountArgs(_ArgsBase[int]):
    """Parses the payment amount from the subscription token."""

    subscription: int
    """The subscription token."""

    @staticmethod
    def method() -> str:
        return "payment_amount(asset)uint64"


@dataclasses.dataclass(kw_only=True)
class PaymentFrequencyArgs(_ArgsBase[int]):
    """Parses the payment frequency from the subscription token."""

    subscription: int
    """The subscription token."""

    @staticmethod
    def method() -> str:
        return "payment_frequency(asset)uint64"


@dataclasses.dataclass(kw_only=True)
class CycleNumberArgs(_ArgsBase[int]):
    """Calculates the payment cycle number 'as at' a specific round."""

    subscription: int
    """The subscription token."""
    at_round: int
    """The round to calculate the payment cycle 'as at'."""

    @staticmethod
    def method() -> str:
        return "cycle_number(asset,uint64)uint64"


@dataclasses.dataclass(kw_only=True)
class ClaimPaymentArgs(_ArgsBase[int]):
    """Makes a payment to the subscription token owner, if eligible."""

    axfer: TransactionWithSigner
    """The transaction transferring a unit of the subscription token to the contract account."""

    @staticmethod
    def method() -> str:
        return "claim_payment(axfer)uint64"


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def mint_tokens(
        self,
        *,
        initial_redeemer: str | bytes,
        active_from: int,
        payment_amount: int,
        payment_frequency: int,
        max_payments: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Creates
        
        Adds a call to `mint_tokens(account,uint64,uint64,uint64,uint64)uint64` ABI method
        
        :param str | bytes initial_redeemer: _description_
        :param int active_from: _description_
        :param int payment_amount: _description_
        :param int payment_frequency: _description_
        :param int max_payments: _description_
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = MintTokensArgs(
            initial_redeemer=initial_redeemer,
            active_from=active_from,
            payment_amount=payment_amount,
            payment_frequency=payment_frequency,
            max_payments=max_payments,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def withdraw_tokens(
        self,
        *,
        subscription: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Transfers the subscription tokens to the initial redeemer.
        
        Adds a call to `withdraw_tokens(asset)void` ABI method
        
        :param int subscription: The subscription token.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = WithdrawTokensArgs(
            subscription=subscription,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def active_from(
        self,
        *,
        subscription: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Parses the 'active from' round number from the subscription token.
        
        Adds a call to `active_from(asset)uint64` ABI method
        
        :param int subscription: The subscription token.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ActiveFromArgs(
            subscription=subscription,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def payment_amount(
        self,
        *,
        subscription: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Parses the payment amount from the subscription token.
        
        Adds a call to `payment_amount(asset)uint64` ABI method
        
        :param int subscription: The subscription token.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = PaymentAmountArgs(
            subscription=subscription,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def payment_frequency(
        self,
        *,
        subscription: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Parses the payment frequency from the subscription token.
        
        Adds a call to `payment_frequency(asset)uint64` ABI method
        
        :param int subscription: The subscription token.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = PaymentFrequencyArgs(
            subscription=subscription,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def cycle_number(
        self,
        *,
        subscription: int,
        at_round: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Calculates the payment cycle number 'as at' a specific round.
        
        Adds a call to `cycle_number(asset,uint64)uint64` ABI method
        
        :param int subscription: The subscription token.
        :param int at_round: The round to calculate the payment cycle 'as at'.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CycleNumberArgs(
            subscription=subscription,
            at_round=at_round,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def claim_payment(
        self,
        *,
        axfer: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Makes a payment to the subscription token owner, if eligible.
        
        Adds a call to `claim_payment(axfer)uint64` ABI method
        
        :param TransactionWithSigner axfer: The transaction transferring a unit of the subscription token to the contract account.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ClaimPaymentArgs(
            axfer=axfer,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class TokenisedSubscriptionsClient:
    """A contract for subscription payments using redeemable NFTs.
    
    A class for interacting with the TokenisedSubscriptions app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        TokenisedSubscriptionsClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def mint_tokens(
        self,
        *,
        initial_redeemer: str | bytes,
        active_from: int,
        payment_amount: int,
        payment_frequency: int,
        max_payments: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Creates
        
        Calls `mint_tokens(account,uint64,uint64,uint64,uint64)uint64` ABI method
        
        :param str | bytes initial_redeemer: _description_
        :param int active_from: _description_
        :param int payment_amount: _description_
        :param int payment_frequency: _description_
        :param int max_payments: _description_
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: _description_"""

        args = MintTokensArgs(
            initial_redeemer=initial_redeemer,
            active_from=active_from,
            payment_amount=payment_amount,
            payment_frequency=payment_frequency,
            max_payments=max_payments,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def withdraw_tokens(
        self,
        *,
        subscription: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Transfers the subscription tokens to the initial redeemer.
        
        Calls `withdraw_tokens(asset)void` ABI method
        
        :param int subscription: The subscription token.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = WithdrawTokensArgs(
            subscription=subscription,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def active_from(
        self,
        *,
        subscription: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Parses the 'active from' round number from the subscription token.
        
        Calls `active_from(asset)uint64` ABI method
        
        :param int subscription: The subscription token.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The 'active from' round number."""

        args = ActiveFromArgs(
            subscription=subscription,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def payment_amount(
        self,
        *,
        subscription: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Parses the payment amount from the subscription token.
        
        Calls `payment_amount(asset)uint64` ABI method
        
        :param int subscription: The subscription token.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The payment amount in MicroAlgos."""

        args = PaymentAmountArgs(
            subscription=subscription,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def payment_frequency(
        self,
        *,
        subscription: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Parses the payment frequency from the subscription token.
        
        Calls `payment_frequency(asset)uint64` ABI method
        
        :param int subscription: The subscription token.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The payment frequency (number of rounds)."""

        args = PaymentFrequencyArgs(
            subscription=subscription,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def cycle_number(
        self,
        *,
        subscription: int,
        at_round: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calculates the payment cycle number 'as at' a specific round.
        
        Calls `cycle_number(asset,uint64)uint64` ABI method
        
        :param int subscription: The subscription token.
        :param int at_round: The round to calculate the payment cycle 'as at'.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The payment cycle number."""

        args = CycleNumberArgs(
            subscription=subscription,
            at_round=at_round,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def claim_payment(
        self,
        *,
        axfer: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Makes a payment to the subscription token owner, if eligible.
        
        Calls `claim_payment(axfer)uint64` ABI method
        
        :param TransactionWithSigner axfer: The transaction transferring a unit of the subscription token to the contract account.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = ClaimPaymentArgs(
            axfer=axfer,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
