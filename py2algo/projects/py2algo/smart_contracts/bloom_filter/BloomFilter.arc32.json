{
    "hints": {
        "new(uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "create_bloom_filter()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "buy_nft(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuYmxvb21fZmlsdGVyLmNvbnRyYWN0LkJsb29tRmlsdGVyLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmxvb21fZmlsdGVyL2NvbnRyYWN0LnB5OjQ1CiAgICAvLyBjbGFzcyBCbG9vbUZpbHRlcihBUkM0Q29udHJhY3QpOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 2
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "max_supply": {
                    "type": "uint64",
                    "key": "max_supply"
                },
                "minted": {
                    "type": "uint64",
                    "key": "minted"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "BloomFilter",
        "desc": "A contract that uses a Bloom filter to ensure unit names are unique.",
        "methods": [
            {
                "name": "new",
                "args": [
                    {
                        "type": "uint64",
                        "name": "max_supply",
                        "desc": "The maximum number of NFTs that can be minted."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Creates a new application and initialises the bloom filter."
            },
            {
                "name": "create_bloom_filter",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Initialises the bloom filter."
            },
            {
                "name": "buy_nft",
                "args": [
                    {
                        "type": "string",
                        "name": "unit_name",
                        "desc": "The unit name for the asset."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Allows a user to mint anf purchase a BAYC NFT."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}