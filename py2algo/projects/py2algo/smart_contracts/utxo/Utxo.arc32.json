{
    "hints": {
        "convert_algo_to_utxo(pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "convert_utxo_to_algo(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "value(asset)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "process_transaction(uint64[],(address,uint64)[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudXR4by5jb250cmFjdC5VdHhvLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzbWFydF9jb250cmFjdHMvdXR4by9jb250cmFjdC5weToxNgogICAgLy8gY2xhc3MgVXR4byhBUkM0Q29udHJhY3QpOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Utxo",
        "desc": "A contract for simulating UTXOs on Algorand.",
        "methods": [
            {
                "name": "convert_algo_to_utxo",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "convert_utxo_to_algo",
                "args": [
                    {
                        "type": "asset",
                        "name": "utxo"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "value",
                "args": [
                    {
                        "type": "asset",
                        "name": "utxo"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "process_transaction",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "tx_ins"
                    },
                    {
                        "type": "(address,uint64)[]",
                        "name": "tx_outs"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}