{
    "hints": {
        "mint_nft()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "opt_in(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuaW5uZXJfdHhucy5jb250cmFjdC5Jbm5lci5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc21hcnRfY29udHJhY3RzL2lubmVyX3R4bnMvY29udHJhY3QucHk6MjQKICAgIC8vIGNsYXNzIElubmVyKEFSQzRDb250cmFjdCk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "counter": {
                    "type": "uint64",
                    "key": "counter"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Inner",
        "desc": "A contract demonstrating inner transactions in algopy.",
        "methods": [
            {
                "name": "mint_nft",
                "args": [],
                "returns": {
                    "type": "uint64",
                    "desc": "The asset ID of the NFT minted."
                },
                "desc": "Mints an NFT."
            },
            {
                "name": "opt_in",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset",
                        "desc": "The asset to opt in to."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Opts the application account in to receive an asset."
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount",
                        "desc": "The amount of MicroAlgos to withdraw."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Transfers Algos to the application creator's account."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}