#pragma version 10

smart_contracts.iteration.contract.Iteration.approval_program:
    // smart_contracts/iteration/contract.py:9
    // class Iteration(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@9
    method "sum(uint64[])uint64"
    method "first_even(uint64[])uint64"
    method "last_even_index(uint64[])uint64"
    method "repeat(string,uint64)string"
    method "fibonacci(uint64)uint64"
    txna ApplicationArgs 0
    match main_sum_route@2 main_first_even_route@3 main_last_even_index_route@4 main_repeat_route@5 main_fibonacci_route@6
    err // reject transaction

main_sum_route@2:
    // smart_contracts/iteration/contract.py:12
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/iteration/contract.py:9
    // class Iteration(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/iteration/contract.py:12
    // @arc4.abimethod
    callsub sum
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_first_even_route@3:
    // smart_contracts/iteration/contract.py:27
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/iteration/contract.py:9
    // class Iteration(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/iteration/contract.py:27
    // @arc4.abimethod
    callsub first_even
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_last_even_index_route@4:
    // smart_contracts/iteration/contract.py:44
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/iteration/contract.py:9
    // class Iteration(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/iteration/contract.py:44
    // @arc4.abimethod
    callsub last_even_index
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_repeat_route@5:
    // smart_contracts/iteration/contract.py:61
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/iteration/contract.py:9
    // class Iteration(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    // smart_contracts/iteration/contract.py:61
    // @arc4.abimethod
    callsub repeat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_fibonacci_route@6:
    // smart_contracts/iteration/contract.py:77
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/iteration/contract.py:9
    // class Iteration(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/iteration/contract.py:77
    // @arc4.abimethod
    callsub fibonacci
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@9:
    // smart_contracts/iteration/contract.py:9
    // class Iteration(ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// smart_contracts.iteration.contract.Iteration.sum(array: bytes) -> uint64:
sum:
    // smart_contracts/iteration/contract.py:12-13
    // @arc4.abimethod
    // def sum(self, array: UInt64Array) -> UInt64:
    proto 1 1
    // smart_contracts/iteration/contract.py:22
    // total = UInt64(0)
    int 0
    // smart_contracts/iteration/contract.py:23
    // for n in array:
    frame_dig -1
    int 0
    extract_uint16
    frame_dig -1
    extract 2 0
    int 0

sum_for_header@1:
    // smart_contracts/iteration/contract.py:23
    // for n in array:
    frame_dig 3
    frame_dig 1
    <
    bz sum_after_for@4
    frame_dig 3
    dup
    int 8
    *
    frame_dig 2
    swap
    int 8
    extract3
    // smart_contracts/iteration/contract.py:24
    // total += n.native
    btoi
    frame_dig 0
    +
    frame_bury 0
    int 1
    +
    frame_bury 3
    b sum_for_header@1

sum_after_for@4:
    // smart_contracts/iteration/contract.py:25
    // return total
    retsub


// smart_contracts.iteration.contract.Iteration.first_even(array: bytes) -> uint64:
first_even:
    // smart_contracts/iteration/contract.py:27-28
    // @arc4.abimethod
    // def first_even(self, array: UInt64Array) -> UInt64:
    proto 1 1
    byte ""
    // smart_contracts/iteration/contract.py:39
    // for n in array:
    frame_dig -1
    int 0
    extract_uint16
    frame_dig -1
    extract 2 0
    int 0

first_even_for_header@1:
    // smart_contracts/iteration/contract.py:39
    // for n in array:
    frame_dig 3
    frame_dig 1
    <
    bz first_even_after_for@6
    frame_dig 3
    int 8
    *
    frame_dig 2
    swap
    int 8
    extract3
    // smart_contracts/iteration/contract.py:40
    // if n.native % 2 == 0:
    btoi
    dup
    frame_bury 0
    int 2
    %
    bnz first_even_after_if_else@4
    // smart_contracts/iteration/contract.py:41
    // return n.native
    retsub

first_even_after_if_else@4:
    frame_dig 3
    int 1
    +
    frame_bury 3
    b first_even_for_header@1

first_even_after_for@6:
    // smart_contracts/iteration/contract.py:42
    // return UInt64(0)
    int 0
    frame_bury 0
    retsub


// smart_contracts.iteration.contract.Iteration.last_even_index(array: bytes) -> uint64:
last_even_index:
    // smart_contracts/iteration/contract.py:44-45
    // @arc4.abimethod
    // def last_even_index(self, array: UInt64Array) -> UInt64:
    proto 1 1
    // smart_contracts/iteration/contract.py:56
    // for i, n in reversed(uenumerate(array)):
    frame_dig -1
    int 0
    extract_uint16
    dup
    frame_dig -1
    extract 2 0
    swap
    int 0
    swap

last_even_index_for_header@1:
    // smart_contracts/iteration/contract.py:56
    // for i, n in reversed(uenumerate(array)):
    frame_dig 2
    frame_dig 0
    <
    bz last_even_index_after_for@6
    frame_dig 3
    int 1
    -
    dup
    int 8
    *
    frame_dig 1
    swap
    int 8
    extract3
    // smart_contracts/iteration/contract.py:57
    // if n.native % 2 == 0:
    btoi
    int 2
    %
    bnz last_even_index_after_if_else@4
    // smart_contracts/iteration/contract.py:58
    // return i
    frame_bury 0
    retsub

last_even_index_after_if_else@4:
    frame_dig 2
    int 1
    +
    frame_bury 2
    frame_bury 3
    b last_even_index_for_header@1

last_even_index_after_for@6:
    // smart_contracts/iteration/contract.py:59
    // return UInt64(0)
    int 0
    frame_bury 0
    retsub


// smart_contracts.iteration.contract.Iteration.repeat(string: bytes, times: uint64) -> bytes:
repeat:
    // smart_contracts/iteration/contract.py:61-62
    // @arc4.abimethod
    // def repeat(self, string: arc4.String, times: UInt64) -> String:
    proto 2 1
    // smart_contracts/iteration/contract.py:72
    // result = String()
    byte ""
    // smart_contracts/iteration/contract.py:73
    // for _i in urange(times):
    int 0

repeat_for_header@1:
    // smart_contracts/iteration/contract.py:73
    // for _i in urange(times):
    frame_dig 1
    frame_dig -1
    <
    bz repeat_after_for@5
    // smart_contracts/iteration/contract.py:74
    // result += string.native
    frame_dig -2
    extract 2 0
    frame_dig 0
    swap
    concat
    frame_bury 0
    // smart_contracts/iteration/contract.py:73
    // for _i in urange(times):
    frame_dig 1
    int 1
    +
    frame_bury 1
    b repeat_for_header@1

repeat_after_for@5:
    // smart_contracts/iteration/contract.py:75
    // return result
    retsub


// smart_contracts.iteration.contract.Iteration.fibonacci(n: uint64) -> uint64:
fibonacci:
    // smart_contracts/iteration/contract.py:77-78
    // @arc4.abimethod
    // def fibonacci(self, n: UInt64) -> UInt64:
    proto 1 1
    // smart_contracts/iteration/contract.py:87
    // return n if n <= 1 else self.fibonacci(n - 1) + self.fibonacci(n - 2)
    frame_dig -1
    int 1
    <=
    bz fibonacci_ternary_false@2
    frame_dig -1
    b fibonacci_ternary_merge@3

fibonacci_ternary_false@2:
    // smart_contracts/iteration/contract.py:87
    // return n if n <= 1 else self.fibonacci(n - 1) + self.fibonacci(n - 2)
    frame_dig -1
    int 1
    -
    callsub fibonacci
    frame_dig -1
    int 2
    -
    callsub fibonacci
    +

fibonacci_ternary_merge@3:
    // smart_contracts/iteration/contract.py:87
    // return n if n <= 1 else self.fibonacci(n - 1) + self.fibonacci(n - 2)
    retsub
