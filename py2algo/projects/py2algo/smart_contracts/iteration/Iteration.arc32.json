{
    "hints": {
        "sum(uint64[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "first_even(uint64[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "last_even_index(uint64[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "repeat(string,uint64)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fibonacci(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuaXRlcmF0aW9uLmNvbnRyYWN0Lkl0ZXJhdGlvbi5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc21hcnRfY29udHJhY3RzL2l0ZXJhdGlvbi9jb250cmFjdC5weTo5CiAgICAvLyBjbGFzcyBJdGVyYXRpb24oQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Iteration",
        "desc": "A contract demonstrating iteration methods in algopy.",
        "methods": [
            {
                "name": "sum",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "array",
                        "desc": "The array to sum."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The sum of the array."
                },
                "desc": "Sums an array of numbers."
            },
            {
                "name": "first_even",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "array",
                        "desc": "The array to search."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The first even number."
                },
                "desc": "Returns the first even number in the array.\nDefaults to zero."
            },
            {
                "name": "last_even_index",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "array",
                        "desc": "The array to search."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The index of the last even number."
                },
                "desc": "Returns the index of the last even number in the array.\nDefaults to zero."
            },
            {
                "name": "repeat",
                "args": [
                    {
                        "type": "string",
                        "name": "string",
                        "desc": "The string to repeat."
                    },
                    {
                        "type": "uint64",
                        "name": "times",
                        "desc": "The number of times to repeat the string."
                    }
                ],
                "returns": {
                    "type": "string",
                    "desc": "The repeated string."
                },
                "desc": "Repeats a string a number of times."
            },
            {
                "name": "fibonacci",
                "args": [
                    {
                        "type": "uint64",
                        "name": "n",
                        "desc": "The index of the Fibonacci number to return."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The nth Fibonacci number."
                },
                "desc": "Returns the nth Fibonacci number."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}